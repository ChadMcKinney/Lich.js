{-
    Glitch Lich -- Tokyo Algorave 

    notes: each member should use prefixes for their variables. 
    h = Chad
    o = Cole
    u = curtis

    for example:
    uSnare => ...
    hDrums +> ...
    oMel1 ~> ...
-}




-------------------------------------------------------------------------------------------------------------------------
-- | Chad
-------------------------------------------------------------------------------------------------------------------------

------------
-- coleJI
------------


ff = degree2Freq coleJI

-- section 1 stuff
ff = degree2Freq coleJI
hsnare => choose [violet 1,pink 1,brown 1,white 1,clipNoise 0.3] >> delay (1/(ff -14)) 0.999 >> env [0,1,1,0] [0,(random 0.02 0.15),0] 0 >> auxThrough 5
hss => pink 1 >> bandpass (ff 16) 4 >> gain 16 >> delay (1/(ff (random -16 -8))) 0.999 >> env [0,0.3,0.3,0] [0,0.05,0] 0 >> auxThrough 5
hlkick => square (ff -16) >> add (tri $ ff -24) >> perc 0 0.6 0.05 >> auxThrough 5
hlkicker +> [hlkick hss] [hsnare hss] [hss hlkick] [hss hsnare]


-- Section 2 stuff, Not to be mixed with other sounds
hbd => tri (degree2Freq coleJI -32) >> add (tri (degree2Freq coleJI -20)) >> lowpass 100 0.1 >> perc 0 1.2 0.15
hbd2 => tri (degree2Freq coleJI -22) >> lowpass 500 0.1 >> perc 0.005 2 1
hsd1 => sin ((freq 0) + (random -13 13)) >> gain 0.25 >> add (violet 1 >> gain 30) >> highpass (freq 0) 30 >> env [0, 0.03, 0.0035, 0] [0, 0.0001, random 0.01 0.2] 0 >> auxThrough (randomI 0 3)
    where freq x = degree2Freq coleJI (add 12 $ randomI -1 1)
hsd2 => sin (freq + (random -13 13)) >> gain 0.25 >> add (violet 1 >> gain 30) >> bandpass freq 50 >> env [0, 1, 0.035, 0] [0, 0.05, 1] 0 >> auxThrough (randomI 0 3)
    where freq = (degree2Freq coleJI 15)
hsd3 => violet 1 + pink 1 >> bandpass (degree2Freq coleJI 26) 1 >> lowshelf 200 12 >> env [0,1,0.03,0] [0,0.1,1] 0 >> auxThrough (randomI 0 3)
    
hdrumsD2 +> hbd [_ hbd] [_ hsd2] hsd2 hbd [_ hbd] [hsd1 hsd2] hsd2 _ [hbd _] hsd2 [hsd1 hsd2] [hbd hsd2] [hsd1 hbd] [hsd2 hsd1] hsd2
hdrumsD3 +> _ hsd3 | (*2)

-- Don't forget to play these!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
hdelayFX => auxIn 0 >> lowpass (sin 0.1767 >> range 200 1000) 5 >> delay tempoSeconds 0.6
hdelayFX2 => auxIn 1 >> highpass (sin 0.1 >> range 200 1000) 5 >> delay (tempoSeconds * 1.5) 0.5
hdelayFX3 => auxIn 2 >> gain 2 >> bandpass (sin 0.1317 >> range 200 2000) 5 >> delay (tempoSeconds * 2.5) 0.75

hneonBass freq => (square (freq/2)) + (saw (freq*2)) + (saw (freq*(add 2 (sin 4 >> gain 0.04)))) + (pink 1 >> lowpass freq 50) >> lowpass (sin 0.1 >> range 200 1000) 0.01 >> env [0.0,0.2,0.03,0] [0.002,1,3] 0
hneonBassSeq ~> hneonBass (ff -12) _ (ff -8) _ _ _ (ff -4) _ (ff (choose [1, -1, -5])) _ _ (ff -9) _ _ (ff -5) | (/2) _ _ _ _ _ (/2) _

hneonBass2 freq => (saw (freq/2)) + (saw (freq/(add 2 (tri 4 >> gain 0.08)))) + (pink 1 >> lowpass freq 10) >> env [0.0,0.25,0.03,0] [0.001,0.1,3] 0 >> auxThrough 3
hneonBassSeq2 ~> hneonBass2 [(ff $ choose [-6, -12]) (ff $ choose [-5,-8])] [(ff $ choose [-5, -4]) (ff (choose [1, -1, -5]))] [(ff -9) (ff -5)] | (*4) (*8) (*4) (*2) (*2) _ (/2)

-- This goes with neonBass2
hdelayFX4 => auxIn 3 >> env2 [0,1] [1] 0 >> delay (sin 0.3 >> range 0.01 0.001) 0.1 >> delay 1.25 0.6 >> gain 0.25





-- Just some random thing right now
let hdb => sin (env2 [80,20] [0.15] 0 1) >> perc 0 1 0.5
let hsn => sin (env [1000, 200] [0.07] 0 1) >> perc2 0 1 0.07 >> add (pink 0.25) >> pan 0.25 >> perc 0.001 1 0.1
let hhh => square (pow 2 $ tstutter 3 $ pseq [1..14]) >> pink >> pan -0.25 >> perc 0 0.3 0.07

hdrums +> (pseq [hdb, hhh, hhh, hhh, hhh, hsn] >> pwarp (psin 0.75)) | (/2)


---------------
-- Prometheus
---------------

-- Cool bass bubble glitchy
let hres freq => brown 1 >> perc2 0.0 0.3 0.001 >> reson freq 1.5 >> distortion2 0.1 >> d >> en
    where
        d = delay (noiseX 1 >> range 0.001 0.7) (noiseX 1 >> range 0.1 0.9)
        en = env [0.5,0.15,0] [0.025,(exprandom 0.05 1)] 0
        
hreseq ~> hres (pseq [1..15] >> pwarp (psin 0.7)) | ((/16) . (d2f prometheus)) | (pseq [(/2), (*1), (/2)] >> pwarp (psin 0.7))


let hcbass deg dur speed => pl >> lo >> li >> en
    where
        freq = d2f prometheus deg
        pl = saw freq + saw (freq*2) >> chorus speed (tseq [0.25,0.5,1])
        lo = lowshelf freq 35
        li = limiter -6
        en = env [0.4,0.05,0] [0.05,dur/3] 0
        
        
let hcbassSeq = pbind "pbass" hcbass [deg, dur, speed] dur
    where
        deg = pseq [-12,-10..-6] >> pfir [1,0.5,-0.5] >> pwarp (psimplex 0.125) >> pstutter 6
        dur = pseq (map (1/) [1,2,3,4,6]) >> pfir [1,0.5,0.5] >> pwarp (psin 0.1)
        speed = pseq [1..13] >> pwarp (psin 0.075)
        


let hCloudBuffer = newBuffer sampleRate
let hCloudChaos deg filt dur => os >> re >> fi >> en
    where
        freq = d2f prometheus deg
        os = square (freq/4) + square (freq/2) + square freq + white 1
        re = recPlayBuf hCloudBuffer (tseq [-0.5,1,-1]) (tseq [1,-1,2,-2,4,8,16])
        rs = random 0.5 40 
        fi n = n >> lowpass (freq * (choose [0.5,2,4,8,16,32])) rs
        en n = n >> limiter -6 >> clip 1 >> env [0.3,0.0175,0] [0.125,dur/4] 0


let hCloudSeq = pbind "cloudSeq" hCloudChaos [deg,filt,dur] dur
    where
        dur = pseq (map (/2) [1,1,2,1,1,1,1,2,4,2,2,2]) >> pwarp (psin 0.04) >> pstutter 2
        deg = pseq (map (*2) [1,1,2,1,4,0,-9,3,1,5]) >> pwarp (psaw 0.03) >> pmul (pseq [-4,3,-2,1,-0.5,0.25])
        filt = pseq [0,1,2,3]        
        
    

-- verb version?
let hCloudBuffer = newBuffer sampleRate
let hCloudChaos deg filt dur => os >> fi >> re >> en >> auxOut 8
    where
        freq = d2f prometheus deg
        os = square (freq/4) + sin (freq/2) + tri freq + white 1
        re = recPlayBuf hCloudBuffer (tseq [-0.5,1,-1]) (tseq [1,-1,2,-2,4,8,16])
        rs = random 0.5 40 
        fi n = n >> lowpass (freq * (choose [2,4,8,16])) rs
        en n = n >> limiter -6 >> clip 1 >> env [0.3,0.0175,0,0] [0.05,dur/4,dur/4] 0


let hCloudVerb = auxIn 8 >> reverb 1 100 0.01 0 >> play
stop hCloudVerb


------------
-- scriabin
------------


-- Dark Chords
let hDarkChords chord => filt >> perc onset amp 5
    where
        freqs = map (d2f (chord::scale)) (chord::degrees)
        saws = sum $ map (pan (random -1 1) . saw) freqs
        amp = 0.25 / (length freqs)
        onset = exprandom 0.5 4
        fEnv = env2 [mul 2 $ head freqs, mul 4 $ last freqs, head freqs] [onset, 5] 1 1
        oscs = (sin (head freqs / 2) >> gain 2) + saws
        filt = oscs >> gain (square ((choose [0.25,1/3,0.5,2/3,1,2,3])/tempoSeconds) >> range 0 1) >> lowpass fEnv 0


let hDarkProg = pbind "hDarkProg" hDarkChords chords 16
    where
        chord = Chord scriabin 4
        chords = pseq [
                chord [-6,1,4],
                chord [-10,-6,0],
                chord [-5,-2,3,6],
                chord [-5,2,4,7]
            ]
        
        
        
let hDarkBuf = newBuffer sampleRate
let hDarkSynth freq => os >> dec >> recPlayBuf hDarkBuf 1 -1 >> pn >> en
    where
        os = saw (freq*0.5) + saw freq + saw (freq * 0.125)
        dec = decimate (noiseX (random 0.25 2) >> exprange 400 sampleRate)
        pn = pan (tseq [-0.5,0.5])
        de = tseq [0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.075,5]
        en = env [0.2,0.01,0,0] [0.075,de,tempoSeconds * 2] 0


hDarkM ~> hDarkSynth (pcomb (pseq [1..4]) (pseq [0..9])) | (d2f scriabin) | (pwarp (psin 0.05) (pseq [(*1),(/2),(/2)]))


{-
let hDarkBass freq => os >> lp >> pn >> en
    where
        sa = sin (freq/2) + saw (freq/4) + saw (freq/2)
        no = sin freq >> distortion2 5 >> freqShift (neg freq) >> gain 20 >> clip 4
        os = wchoose [0.7, 0.3] [sa, no] 
        pn = pan (tseq [-0.125,0.125])
        lf = square ((randI 1 8)/tempoSeconds/8) >> lag (exprandom 0.001 1)
        lp = lowpass (lf >> exprange (freq / 4) (freq * 8)) 12
        en = env [0,0.3,0.15,0] [0.0,(tempoSeconds * 4),0.5] 0

hDarkB ~> hDarkBass (pcomb (pseq [1..4]) (pseq [0..4]) >> pstutter 2) | ((/4) . (d2f scriabin)) | (*4)
-}

let hDarkBass freq => os >> lp >> pn >> crush (randomI 6 32) >> en
   where
       sa = (square (freq/2) + saw (freq/4) + saw (freq/2)) >> distortion3 (random 20 60) >> gain 10 >> crush 2
       no = saw (freq*8) >> distortion2 5 >> freqShift (neg (env2 [(freq*4),freq] [(random 0.5 2)] 1 1)) >> gain 10 >> clip 8
       no2 = noiseX (env2 [1760,440] [(random 0.5 2)] 1 1) >> gain 40 >> clip 10
       os = wchoose [0.8, 0.1,0.1] [sa, no, no2]
       pn = pan (tseq [-0.125,0.125])
       lf = square ((choose [4,6,8,12,16,32])/tempoSeconds/8) >> lag (exprandom 0.0005 1)
       lp = lowpass (lf >> exprange (freq / 8) (freq * 64)) (random 1 10)
       en = env [0,0.05,0.05,0] [0.01,(tempoSeconds * (tseq [4,4,2,2,2,2,1,1,1,1])),0.1] 0

hDarkB ~> hDarkBass (pcomb (pseq [0..7]) (pseq [0..4]) >> pstutter 5) | ((/4) . (d2f scriabin)) | (*(tseq [4,4,2,2,2,2,1,1,1,1]))

let hDarkSynth2 freq => sin freq + sin (freq/2) >> gain 0.5 >> del >> dist >> pn >> en
    where
        dist = distortion2 (psin 0.0625 >> pexprange 0.01 0.5 >> tmul 1)
        del = delay ((tseq [1,2,4,8,16,32,64])/freq) 0.5
        pn = pan (random -0.3 0.3)
        en = env [0, 0.9, 0.05, 0] [0,tempoSeconds*0.25,tempoSeconds*0.5] 0
        
        
hDarkM2 ~> hDarkSynth2 (pseries 0 (pseq [1,7]) >> pwrap 0 17 >> pstutter 4) | ((/4) . d2f scriabin) | (/2)



-------------------------------------------------------------------------------------------------------------------------
-- | Cole
-------------------------------------------------------------------------------------------------------------------------

-- master drum FX synth --
let oDrumFX = auxIn 9 >> filt >> comp >> limit >> play
    where
        comp = compressor -18 40 50 0.001 0.2
        limit = limiter -3
        filt = lowpass 19000 0
stop oDrumFX


-- lowish LFNoise hit --
let oLfn => noiseX f >> dist >> filt >> pan -0.75 >> perc 0 0.35 0.12 >> auxOut 9
    where
        f = (tseq [2000,5000,2000])
        amt = (tseq [0.01,0.1])
        dist = distortion2 amt
        filt = highpass 1000 10

oLfner +> _
oLfner +> oLfn _ _ oLfn  [oLfn oLfn] _ _ oLfn
oLfner +> oLfn _ _ oLfn  _ _ _ _
oLfner +> oLfn _ _ oLfn  _ _ [_ oLfn] oLfn
oLfner +> _ oLfn oLfn oLfn  oLfn [_ oLfn] _ oLfn
stop oLfner

-- highish noise hit --
let oHfn => brown 4 >> dist >> filt >> pan 0.75 >> perc 0 0.35 0.12 >> auxOut 9
    where
        f = (tseq [3500,8000])
        q = (tseq [15,30,15])
        amt = (tseq [0.001,0.05])
        dist = distortion2 amt
        filt = highpass f q

oHfner +> _
oHfner +> _ oHfn [_ oHfn] _
oHfner +> _ oHfn [_ oHfn] _ oHfn _ oHfn _
oHfner +> _ oHfn [_ oHfn] _ oHfn _ oHfn [_ oHfn]
oHfner +> oHfn oHfn [_ oHfn] oHfn [oHfn oHfn] [_ oHfn] oHfn oHfn
stop oHfner


-- kick --
let oKk => (osc + bass + noise) >> env [0,a,(a/4),0] [0.01,0.05,0.25] 0 >> auxOut 9
   where
        a = 2
        osc = sin (env2 [1200,30] [0.06] 0 1)
        bass = sin 27.5
        noise = brown 0.05 >> lowpass 600 3 >> perc2 0.02 1 0.075

oKker +> _
oKker +> oKk _ _ _      _ _ _ _         _ oKk _ _       oKk _ _ _
oKker +> oKk _ _ _      _ _ oKk _       _ oKk _ _       oKk _ _ oKk
oKker +> oKk _ _ _      _ _ oKk _       oKk oKk _ _       oKk _ _ oKk
oKker +> oKk _ _ _      _ _ _ _         _ oKk _ _       oKk [_ oKk] _ oKk
oKker +> oKk _ _ _      oKk _ _ _       oKk _ _ _       oKk [_ oKk] _ _
oKker +> oKk _ _ _      oKk _ _ oKk     oKk _ _ _       oKk [_ oKk] _ _
oKker +> oKk _ oKk _    oKk _ oKk _     oKk _ oKk _     oKk [_ oKk] _ oKk
oKker +> oKk _ oKk _    oKk [_ oKk] _ oKk
oKker +> oKk _
oKker +> oKk _ [oKk oKk] _  oKk _ oKk _
oKker +> oKk _ oKk _    oKk [oKk oKk] oKk [_ oKk]
stop oKker


-- shitty snare --
let oSnr => (noise + osc) >> filt >> dist >> pan -0.5 >> perc 0 0.5 dur >> auxOut 9
    where
        dur = tempoSeconds
        n = brown 0.5 >> perc2 0 1 0.1
        noise = n >> highpass (random 2500 2800) 15 >> lowpass 6000 10
        f = tseq [230,240]
        m = ((sin f) * (random 50 60)) + (env2 [700,150] [(dur*0.5)] 1 1)
        osc = tri m >> highpass 500 1
        filt = highpass (tseq [800,1000]) 1
        dist = distortion2 0.05

oSnrer +> _
oSnrer +> _ oSnr
oSnrer +> _ _ oSnr _
oSnrer +> [_ oSnr] oSnr oSnr [_ oSnr]
oSnrer +> _ _ oSnr _  _ _ oSnr [_ oSnr]
oSnrer +> oSnr _ [_ oSnr] _
oSnrer +> oSnr _ [_ oSnr] oSnr
    oSnr _ oSnr _
    [_ oSnr] oSnr oSnr _
    _ oSnr oSnr _
stop oSnrer


-- hi hat --
let oHht => n >> hf >> lf >> crush 1 >> pan 0.5 >> perc 0.01 0.9 0.1 >> auxOut 9
    where
        n = (tseq [(white 1), (brown 1), (pink 1), (violet 1)])
        cut = tseq [3000,4000]
        hf = highpass cut (random 10 20)
        lf = lowpass (cut + 4000) 15

oHhter +> _
oHhter +> oHht
oHhter +> [oHht oHht]
oHhter +> oHht [oHht oHht]
oHhter +> oHht oHht oHht [oHht oHht]
oHhter +> oHht [oHht oHht] oHht [oHht oHht] oHht oHht
oHhter +> _ oHht oHht oHht oHht [_ oHht] _ oHht
oHhter +> [oHht oHht] _ _ oHht  _ [oHht oHht] oHht oHht
stop oHhter


-- echo clappy thing --
let oDh => noise >> del >> hf >> lf >> dist >> perc 0.005 0.1 dur >> auxOut 9
    where
        dur = (tempoSeconds * 4)
        noise = brown 1 >> perc2 0 1 0.1
        del = delay (tempoSeconds * 0.25) 0.35
        line = env2 [500,1000] [dur] 0 1
        hf = highpass line (random 10 20)
        lf = highpass (line + (tseq [400,1000])) (random 10 20)
        dist = distortion2 0.1

oDher +> _
oDher +> oDh _ _ _
oDher +> oDh _ _ oDh
oDher +> oDh _ _ _  _ oDh _ _
oDher +> oDh _ _ _  oDh _ [_ oDh] _
oDher +> oDh _ _ _  oDh _ [_ oDh] oDh
oDher +> oDh _
oDher +> oDh [oDh oDh] _ _  oDh _ [_ oDh] oDh
oDher +> oDh [oDh oDh] _ oDh  oDh _ [_ oDh] oDh
oDher +> oDh [oDh oDh] _ oDh  oDh [_ oDh] [_ oDh] oDh
oDher +> oDh [_ oDh] _ _  _ oDh [_ oDh] oDh
oDher +> oDh _ oDh _  [oDh _ _] [_ oDh _] [_ _ oDh] _
stop oDher


-- chirpy thing --
let oCrp => n >> hf >> lf >> filt >> dist >> pan 0.2 >> perc 0 2.5 0.1 >> auxOut 9
    where
        n = pink 1
        hf = highpass (random 3800 4800) (random 10 20)
        lf = lowpass (tseq [3000,7000]) 15
        line = env2 [600,6000] [0.1] 1 1
        filt = bandpass line (tseq [1,3])
        dist = distortion2 0.02

oCrper +> _
oCrper +> oCrp
oCrper +> oCrp [oCrp oCrp]
oCrper +> oCrp oCrp oCrp [oCrp oCrp]
oCrper +> oCrp [oCrp oCrp] oCrp [oCrp oCrp] oCrp oCrp
oCrper +> oCrp oCrp oCrp [oCrp oCrp] oCrp oCrp oCrp [oCrp oCrp oCrp oCrp]
oCrper +> _ oCrp _ _  _ oCrp _ [oCrp oCrp]
oCrper +> _ oCrp _ _
    _ oCrp [oCrp _ oCrp] [_ oCrp _]
    _ oCrp _ _
    _ oCrp _ [oCrp oCrp oCrp]  
stop oCrper


-- metalic thing --
let oFl => osc >> dist >> filt >> pan -0.5 >> perc 0.01 1 dur >> auxOut 9
    where
        dur = (tempoSeconds * 0.8)
        f = tseq [1000,8000,2900]
        osc = tri perc2 0 1 dur >> range (f/4) f
        dist = distortion2 (tseq [0.5,0.7,0.2,0.9])
        filt = lowpass (tseq [1000,2000,3000]) 10

oFler +> _
oFler +> oFl _
oFler +> _ _ oFl _  _ oFl _ _
oFler +> _ _ oFl _  oFl [_ oFl] _ [oFl oFl]
oFler +> oFl _ oFl oFl  _ _ oFl _
oFler +> oFl oFl _ [oFl oFl]
    _ _ oFl _
    _ oFl oFl _
    [oFl oFl] _ _ _
oFler +> [oFl oFl] [oFl oFl] oFl _  _ _ oFl _
oFler +> [oFl oFl] [oFl oFl] oFl _  _ _ oFl _  _ oFl _ oFl  oFl [_ oFl] _ oFl
stop oFler


-- reverse noise swell --
let oRvs => noise >> filt >> pan 0.25 >> env [0,amp,0] [dur,0.01] 0 >> auxOut 9
    where
        amp = 0.3
        noise = (sin (tseq [155,175,100]) + saw (tseq [25,55])) >> distortion2 0.4
        dur = tempoSeconds * (tseq [0.5,0.3])
        filt = lowpass (env2 [50,5000] [dur] 0 1) 10

oRvser +> _
oRvser +> oRvs _ _ oRvs  _ oRvs oRvs _
oRvser +> oRvs _ _ oRvs  _ oRvs oRvs _  _ _ oRvs _  oRvs [_ oRvs] _ _
oRvser +> oRvs _ oRvs [oRvs oRvs]
oRvser +> [oRvs oRvs] _ oRvs [oRvs oRvs]
oRvser +> [oRvs oRvs] _ oRvs [oRvs oRvs]
    _ _ [oRvs oRvs] _
    _ _ _ _
    oRvs [oRvs oRvs] _ _
oRvser +> _ _ oRvs _
    [oRvs oRvs] _ [oRvs oRvs] _
    _ oRvs _ _
    [oRvs oRvs] oRvs oRvs _
stop oRvser


-- falling sin bleep --
let oSld => osc >> pan 0.4 >> perc 0.025 1 dur >> auxOut 9
   where
        dur = 0.06
        hi = tseq [5000,7000,10000]
        lo = tseq [530,480]
        osc = sin (env2 [hi,lo] [dur] 0 1)

oSlder +> _
oSlder +> oSld _
oSlder +> oSld _ _ oSld  _ _ _ oSld  _ _ _ _  _ oSld oSld _
oSlder +> oSld [oSld oSld] _ _  _ oSld _ _
oSlder +> oSld [oSld oSld] _ _
oSlder +> oSld [oSld oSld] [_ oSld] oSld  [oSld oSld] [_ oSld] oSld oSld
stop oSlder


-- AM noise "snare" --
let oAn => noise >> dist >> filtA >> filtB >> pan 0.4 >> perc 0 0.6 dur >> auxOut 9
    where
        cut = tseq [2000,4000,1000]
        noise = white (tri 8)
        dur = (tempoSeconds * 1.25)
        filtA = highpass (env2 [(cut/10),cut] [dur] 1 1) 4
        filtB = lowpass cut 15
        dist = distortion2 0.05

oAner +> _
oAner +> oAn _ oAn _  _ oAn oAn _
oAner +> _ _ _ oAn  _ _ _ _  [oAn oAn] _ _ oAn  oAn _ _ oAn
oAner +> oAn _ _ oAn  [oAn oAn] _ _ _  [oAn oAn] _ [oAn oAn] oAn  oAn _ _ oAn
oAner +> oAn _ oAn _    [_ oAn] oAn oAn _   oAn _ [_ oAn] oAn   oAn [oAn oAn] _ _
stop oAner


-- low bit noise --
let oLbn => n >> filt >> crush 1 >> pan -0.6 >> perc 0 2 0.15 >> auxOut 9
    where
        n = noiseX (tseq [220,880,440])
        filt = highpass (tseq [1760,1500]) 5

oLbner +> _
oLbner +> oLbn _ _ oLbn  oLbn _ _ _
oLbner +> oLbn _ _ oLbn  oLbn _ [oLbn oLbn] _
oLbner +> oLbn _ _ oLbn  oLbn [_ oLbn] [oLbn oLbn] oLbn
oLbner +> _ _ _ _  [oLbn oLbn] _ _ _  _ _ _ _  [oLbn oLbn] [_ oLbn] _ _
oLbner +> oLbn _ _ oLbn
    oLbn _ [oLbn oLbn] _
    _ _ oLbn _
    [oLbn oLbn] _ [oLbn oLbn] _
oLbner +> _ _ oLbn _
    oLbn _ _ oLbn
    _ oLbn _ _
    [oLbn oLbn] [_ oLbn] _ oLbn
stop oLbner

-- lfo white noise
let oVb => o >> m >> lf >> hf >> d >> p >> env [0,a,(a/3),0] [0,0.05,dur] 0
    where
        dur = tempoSeconds
        a = 0.6
        o = white 1
        lfo = (square (dur*128) >> range 100 5000)
        m = bandpass lfo (tseq [2,5])
        d = distortion2 0.075
        lf = lowpass (tseq [2000,5000]) 20
        hf = highpass (tseq [600,1400,500]) 20
        p = pan (tseq [-0.2,0.2])

oVber +> _
oVber +> oVb _
oVber +> oVb _ _ oVb  oVb _ oVb _  _ oVb oVb _  oVb oVb oVb _
oVber +> oVb _ _ _  _ oVb oVb _  _ oVb oVb _  _ oVb oVb _
oVber +> _ oVb oVb _
stop oVber
-------------------------------------------------------------------------------------------------------------------------
-- | Curtis
-------------------------------------------------------------------------------------------------------------------------
