--Mountains of Madness

-- walk north
--Runes of warding
--Traps / Curses
--One player, Multiple Monsters
--See everyone's text fields, but translate enemy text fields into "lovecraftian" language
--Fixed map, with randomized contents

-- Low: 10 kb/s Med: 50 kb/s High: 200 kb/s

--Story KEYS instead of STORY in demoGame object? Optimization for laterrrr

--pooling data structure.

------------------------------------------------------------------------------------------------
--Data Types
------------------------------------------------------------------------------------------------

--

importjs "Pieces/MountainsOfMadnessPanel.js"

data Item {
	name  			= "Not an item.",
	farDescription  = "Not an item",
	description 	= "Not an Item.",
	carryable		= True,
	action 			= Nothing,
	curse 			= Nothing
}

data Trap {
	name 			= "Acid Trap",
	description 	= "A jet of acid suddenly shoots from the ground under you. You are burned.",
	attack 			= 20,
	dementia		= 5
}

data Location {
	name 			= "Nowhere",
	north 			= "Nowhere",
	south 			= "Nowhere",
	east 			= "Nowhere",
	west 			= "Nowhere",
	up 				= "Nowhere",
	down 			= "Nowhere",
	description 	= "Nothing to see here.",
	farDescription 	= "Nothing to see in the distance.",
	items 			= (),
	moveable 		= False
}

data Player {
	name 		= "New Player",
	health 		= 100,
	location 	= "Nowhere",
	description = "A rather academic looking researcher. Cold, but healthy.",
	items 		= (),
	sanity 		= 100
}

data Monster {
	name 		= "Nobody",
	health 		= 100,
	location 	= "Nowhere",
	description = "Not actually a monster.",
	items 		= (),
	attack 		= 25,
	dementia	= 25
}

data Game {
	players		= ("Nobody" => Player),
	monsters 	= ("Nobody" => Monster),
	locations 	= ("Nowhere" => Location),
	narration 	= "",
	gameOver	= False
}

data Cardinal = North | South | East | West | Up | Down

data GameMessage = Walk | Use | Look | Finish

north 	= North
south 	= South
east 	= East
west 	= West
up 		= Up
down 	= Down

------------------------------------------------------------------------------------------------
--Game Actions
------------------------------------------------------------------------------------------------

-- |addNarration String Game => Game
addNarration story game = game{narration = (game::narration)+" "+story}

addFarDescriptionToNarration item game = game{narration = (game::narration)+" "+(item::farDescription)}

-- | foldOverCardinals (Location -> Game -> Game) -> Location -> (Game -> Game)
--foldOverCardinals f loc = f loc::north . f loc::south . f loc::east . f loc::west . f loc::up $ f loc::down

-- |addLocationNarration :: Location -> Game -> Game
addLocationNarration location game = itemNarratedGame
	where
		locationNarratedGame 	= addNarration (location::description) game
		itemNarratedGame 		= foldr (addFarDescriptionToNarration) locationNarratedGame (location::items)

-- |placeItemAtLocation Item Location => Location
placeItemAtLocation item location = location {items = newItems}
	where
		newItems = ((item :: name) => item) : (location :: items)

-- |removeItemFromLocation Item Location => Location
removeItemFromLocation item location = location{items = newItems}
	where
		newItems = remove (item::name) (location::items)

-- |giveItemToPlayer Item Player => Player
giveItemToPlayer item player = player{items = newItems}
	where
		newItems = ((item::name) => item) : (player::items)

-- |removeItemFromPlayer Item Player => Player
removeItemFromPlayer item player = player{items = newItems}
	where
		newItems = remove (item::name) (player::items)

-- |updateLocation Location Game => Game
updateLocation location game = game{locations = newLocations}
	where
		newLocations = ((location::name) => location) : (game::locations)

-- | addLocations:: Dict -> Game -> Game
addLocations newLocations game = game{locations = combinedLocations}
	where
		combinedLocations = (game::locations) : newLocations

-- |playerLocation Player Game => Location
playerLocation player game = (game::locations) !! (player::location)

-- |getLocation String     Game => Player
getLocation locationName game = game::locations !! locationName

-- |getPlayer String     Game => Player
getPlayer playerName game = game::players !! playerName

-- |getMonster String     Game => Player
getMonster monsterName game = game::monsters !! monsterName

-- |getItem ::  String -> Player -> Game -> Item
getItem itemName player game = (playerLocation player game)::items !! itemName

--findSomethingWithName String -> Game -> Game
findSomethingWithName name game = player ? monster ? location
	where
		player 		= getPlayer name game
		monster 	= getMonster name game
		location 	= getLocation name game

-- |updatePlayer Player Game => Game
updatePlayer player game = game{players = newPlayers}
	where
		newPlayers = ((player::name) => player) : (game::players)

-- |updateMonster Monster Game => Game
updateMonster monster game = game{monsters = newMonsters}
	where
		newMonsters = (monster::name => monster) : (game::monsters)

-- |moveItemFromPlayerToLocation Item Location Player Game => Game
moveItemFromPlayerToLocation item location player game = updatePlayer newPlayer newGame
	where
		newLocation = placeItemAtLocation 	item location
		newPlayer 	= removeItemFromPlayer 	item player
		newGame		= updateLocation newLocation game

-- |pickupCarryableItemFromLocation Item Location Player Game => Game
pickupCarryableItemFromLocation item location player game = updatePlayer newPlayer newGame
	where
		newLocation = removeItemFromLocation item location
		newPlayer 	= giveItemToPlayer 		 item player
		newGame		= updateLocation newLocation game

-- |pickupItemFromLocation Item Location Player Game => Game
pickupItemFromLocation item location player game = 
	case ((player::location) == (location::name)) && item :: carryable of
		True	-> pickupCarryableItemFromLocation item location player game
		False	-> addNarration "I can't carray that!" game 

-- |locationAtCardinal Cardinal Player Game => Location
locationAtCardinal cardinal player game = newLocation
	where
		oldLocation = playerLocation player game
		newLocation =
			case cardinal of
				North -> getLocation (oldLocation :: north) game
				South -> getLocation (oldLocation :: south) game
				East  -> getLocation (oldLocation :: east ) game
				West  -> getLocation (oldLocation :: west ) game
				Up    -> getLocation (oldLocation :: up   ) game
				Down  -> getLocation (oldLocation :: down ) game

-- |lookAtCardinal :: Cardinal -> Player -> Game -> Game
lookAtCardinal cardinal player game = addNarration description game
	where
		description = (locationAtCardinal cardinal player game) :: farDescription

-- |lookAtItem :: String -> Player -> Game -> Game
lookAtItem itemName player game = newGame
	where
		item = (getItem itemName player game)
		newGame =
			case item of
				Item 	-> addNarration (item::description) game
				Nothing -> addNarration "I don't see anything by that name." game

-- |movePlayer :: Cardinal -> Player -> Game -> Game
movePlayer cardinal player game = 
	case newLocation::moveable of
		True	-> newGame
		False	-> addNarration "That way is blocked." game 
	where
		newLocation 	= locationAtCardinal cardinal player game
		newLocationName = newLocation::name
		newPlayer 		= player{location=newLocationName}
		newGame			= addLocationNarration newLocation $ updatePlayer newPlayer game

moveMonster cardinal monster game = 
	case newLocation::moveable of
		True	-> updateMonster newMonster game
		False	-> addNarration "That way is blocked." game 
	where
		newLocation 	= locationAtCardinal cardinal player game
		newMonster 		= monster{location=newLocation::name}

movePlayerOrMonster cardinal name game = newGame
	where
		playerOrMonster = findSomethingWithName name game
		newGame =
			case playerOrMonster of
				Monster 	-> moveMonster cardinal playerOrMonster game
				Player 		-> movePlayer cardinal playerOrMonster game
				Location	-> game
	
-- |checkPlayerDeath Player Game => Game
checkPlayerDeath player game = 
	case player::health < 1 of
		True	-> (addNarration "You died." game){gameOver = True}
		False	-> game

-- |damagePlayer Int Player Game => Game
damagePlayer damage player game = checkPlayerDeath damagedPlayer newGame
	where
		newHealth		= player::health - damage
		damagedPlayer 	= player {health = newHealth}
		newGame 		= updatePlayer damagedPlayer game

-- |monsterAttacksPlayer Monster Player Game => Game
monsterAttacksPlayer monster player game = damagePlayer (monster::attack) player game

updateItemInHolder item itemName holder game = newGame
	where
		newHolder = (itemName=>item) : holder::items
		newGame =
			case newHolder of
				Monster 	-> updateMonster newHolder game
				Player	 	-> updatePlayer newHolder game
				Location 	-> updateLocation newHolder game
				--_ 			-> game

eraseItemInHolder item holder game = newGame
	where
		newHolder = holder{items = remove (item::name) (holder::items)}
		newGame =
			case newHolder::dataType of
				Monster 	-> updateMonster newHolder game
				Player	 	-> updatePlayer newHolder game
				Location 	-> updateLocation newHolder game
				--_ 			-> game
				
curseItem item aCurse location game = updateItemInHolder newItem (item::name) location game
	where
		newItem = item{curse = aCurse}

nullAction item holder receiver game = addNarration game "That has no effect."

--useItemOnSomething String -> String -> String -> Game -> Game
useItemOnSomething playerName itemName receiverName game = (item::action) item player something game
	where
		player 		= getPlayer playerName game
		item 		= play::items !! itemName
		something 	= findSomethingWithName

--nullAction:: Item -> a -> b -> Game -> Game
nullAction item holder receiver game = addNarration game "That has no effect."

--closedMetalDoor :: String -> Item
closedMetalDoor name = Item name farDescription description carryable action curse
	where
		farDescription  = "A sturdy looking metal door. It's closed."
		description 	= "Seems to be made of stern stuff. Not getting through here without the key."
		carryable		= False
		action 			= Nothing
		curse 			= Nothing

--openedMetalDoor :: String -> Item
openedMetalDoor name = Item name farDescription description carryable action curse
	where
		farDescription  = "A sturdy looking metal door. It's wide open."
		description 	= "Seems to be made of stern stuff."
		carryable		= False
		action 			= Nothing
		curse 			= Nothing

--openDoorWithKey :: Item -> Player -> Location -> Game -> Game
openDoorWithKey key player door location game = newGame
	where
		newDoor 	= openedMetalDoor "OpenMetalDoor"
		newPlayer 	= removeItemFromPlayer key player
		newLocation = placeItemAtLocation newDoor
		newGame 	= 
			case member (door::name) (location::items) of
				True	-> updatePlayer newPlayer $ updateLocation newLocation game
				False	-> game

--closeDoor :: String -> Location -> Game -> Game
closeDoor doorName location game = newGame
	where
		newDoor 	= closedMetalDoor "ClosedMetalDoor"
		newLocation = placeItemAtLocation newDoor
		newGame 	=
			case member (doorName) (location::items) of
				True	-> updateLocation newLocation game
				False	-> game

--key :: Item
key = Item name farDescription description carryable action curse
	where
		name  			= "Key"
		farDescription  = "A metal key."
		description 	= "The key appears to be made from some kind of metal. Strangely you can feel a slight vibration and warmth emmiting from it."
		carryable		= True
		action 			= openDoorWithKey
		curse 			= Nothing


------------------------------------------------------------------------------------------------
--Items and Locations
------------------------------------------------------------------------------------------------

--Zork Above ground
--29 	Rooms
--40ish Connections

--Mountains of Madness
--18 	Rooms
--19 	Connections

--Baroque leit motiff?

------------------------------------------------------------------------------------------------
--ASCII MAP
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
----------------------------------------------[Exit2]-------------------------------------------
------------------------------------------------||----------------------------------------------
------------------------------------[Exit1]==[IcePlateau]==[Exit3]------------------------------
-----------------------------------------------||-----------------------------------------------
--------------------------------------------[RuneStairs]----------------------------------------
-----------------------------------------------U|-----------------------------------------------
-----------------------------------------------U|-----------------------------------------------
---------------------------[SecretVault]====[RuneTunnel]----------------------------------------
-------------------------------||---------------------------------------------------------------
------------------------||===[Library]===||-----------------------------------------------------
------------------------||---------------||-----------------------------------------------------
------------------------||---------------||-----------------------------------------------------
----------------[UndergroundLake]===[CityCenter]------------------------------------------------
-----------------------------------------||-----------------------------------------------------
-----------------------------||====[CityEntrance]===||------------------------------------------
-----------------------------||---------------------||------------------------------------------
-------------------------[UnderRuins]-----------[MuralsBottom]----------------------------------
-----------------------------D|---------------------D|------------------------------------------
--------------------------[Ruins]===[Mountains]===[MuralsTop]-----------------------------------
-----------------------------------------||-----------------------------------------------------
-----------------------------------------||-----------------------------------------------------
---------------------------------||====[mound]====||--------------------------------------------
---------------------------------||      ||       ||--------------------------------------------
-----------------------------[mound2]==[Camp]==[mound3]-----------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

acidTrap		= Trap name desc attack demen
	where
		name 	= "Acid Trap"
		desc 	= "A jet of acid suddenly shoots from the ground under you. You are burned."
		attack 	= 20
		demen	= 5

revelation		= Trap name desc attack demen
	where
		name 	= "A hideous revelation"
		desc 	= "All at once an insane revelation enters your mind. You are overcome with a vision from beyond dimensions, revealing to you just how small a mote your existence is in comparision to the vast NOTHINGNESS of the entire universe. You feel yourself losing grip with sanity."
		attack 	= 0
		demen	= 20

-- |dogCorpse 	::Item
dogCorpse 		= Item name fDesc desc
	where
		name 	= "DogCorpse"
		fDesc 	= "On the ground lays a dessicated dog corpse. It seems to have been here awhile."
		desc 	= "Upon closer inspection I find that it appears to have been mauled. The teeth, or claw, wounds seemed to have left a star like pattern."

-- |corpse2 	::Item
corpse 			= Item name fDesc desc
	where
		name 	= "Corpse"
		fDesc 	= "The dessicated corpse of an antarctic researcher."
		desc 	= "It appears to have been...dissected. The brain is removed, as are several organs. The incisions appear to have been done with surgical precision."

corpse2 		= Item name fDesc desc
	where
		name 	= "Corpse2"
		fDesc 	= "A bloated corpse of a scientist"
		desc 	= "Several of the scientist's limbs appear to have been amputated. This was not done by a wild animal as the wounds have been cauterized."

diary			= Item name fDesc desc
	where
		name 	= "Diary"
		fDesc 	= "Amongst the tattered bedrolls I see a worn diary."
		desc 	= "The diary contains indepth analyses of several in-field dissections conducted."

camp 			= Location "Camp" n s e w u d desc fDesc items mov
	where
		n 		= "Mound"
		s 		= "Nowhere"
		e 		= "Mound3"
		w 		= "Mound2"
		u 		= "Nowhere"
		d 		= "Nowhere"
		desc 	= "I stood amongst the ruins of my forward scout's base camp. They had gone missing. We are part of a small group of biologists exploring the reaches of Antartica. To the north, east, and west I can see three prominent mounds of snow. Given the scout's absence, this seemed ominous. "
		fDesc 	= "You see a white blasted, frigid looking camp."	
		items 	= ("Diary" => diary)
		mov 	= True

mound 		= Location "Mound" n s e w u d desc fDesc items mov
	where
		n 		= "Mountains"
		s 		= "Camp"
		e 		= "Mound3"
		w 		= "Mound2"
		u 		= "Nowhere"
		d 		= "Nowhere"
		desc 	= "Standing before me is a strange greenish mound in the snow. To the north are a series of mountains. To the south is the scout camp."
		fDesc 	= "the vauge outline of a small hill of some kind in the snow."	
		items 	= ("DogCorpse" => dogCorpse)
		mov 	= True

mound2  		= Location "Mound2" n s e w u d desc fDesc items mov
	where
		n 		= "Mound"
		s 		= "Nowhere"
		e 		= "Camp"
		w 		= "Nowhere"
		u 		= "Nowhere"
		d 		= "Nowhere"
		desc 	= "I am standing above a strange redish mound in the snow. To the east is the scout camp, to the north is another of these mounds."
		fDesc 	= "the vauge outline of a small hill of some kind in the snow."	
		items 	= ("Corpse" => corpse)
		mov 	= True

mound3 			= Location "Mound3" n s e w u d desc fDesc items mov
	where
		n 		= "Mound"
		s 		= "Nowhere"
		e 		= "Nowhere"
		w 		= "Camp"
		u 		= "Nowhere"
		d 		= "Nowhere"
		desc 	= "I am standing on a strange redish mound in the snow. To the west is the scout camp, to the north is another of these mounds."
		fDesc 	= "the vauge outline of a small hill of some kind in the snow."	
		items 	= ("Corpse2" => corpse2)
		mov 	= True

mountains 	 	= Location "Mountains" n s e w u d desc fDesc items mov
	where
		n 		= "Nowhere"
		s 		= "Mound"
		e 		= "MuralsTop"
		w 		= "Ruins"
		u 		= "Nowhere"
		d 		= "Nowhere"
		desc 	= "A series of precipitous and daunting cliffs. Arduous hiking."
		fDesc 	= "the peaks of a chain of peaks and cliffs. Looks dangerous."	
		items 	= ()
		mov 	= True	

ruins 	 		= Location "Ruins" n s e w u d desc fDesc items mov
	where
		n 		= "Nowhere"
		s 		= "Nowhere"
		e 		= "Mountains"
		w 		= "Nowhere"
		u 		= "Nowhere"
		d 		= "UnderRuins"
		desc 	= "There are eldritch ruins; crumbling and falling, yet still holding some of their previous strange, and even dangerous, beauty."
		fDesc 	= "What appears to be ancient ruins of some sort of city."	
		items 	= ()
		mov 	= True

carvings 		= Item name fDesc desc
	where
		name 	= "Carvings"
		fDesc 	= "Ornate carvings."
		desc 	= "Otherworldly carvings which depict, minimally yet beautifully, a large underground city. On closer inspection strange creatures can be seen inhabiting the structures. They appear to be dissecting...or dining...on something."

underRuins 		= Location "UnderRuins" n s e w u d desc fDesc items mov
	where
		n 		= "CityEntrance"
		s 		= "Nowhere"
		e 		= "Nowhere"
		w 		= "Nowhere"
		u 		= "Ruins"
		d 		= "UnderRuins"
		desc 	= "The structures open up into an intricately carved passageway."
		fDesc 	= "There seems to be some kind of passageway leading underground."	
		items 	= ("Carvings" => carvings)
		mov 	= True


mural 	 		= Item name fDesc desc
	where
		name 	= "Mural"
		fDesc 	= "Some kind of mural."
		desc 	= "An intricately constructed mural, made of some kind of crystalline materia. Seems almost religious or iconic in nature. Depicts a vaugely orb shaped creature with a multitude of appendages and sub-orb like structures. It appears to be swallowing something...or perhaps talking to it?"

murals 	 		= Location "Murals" n s e w u d desc fDesc items mov
	where
		n 		= "Nowhere"
		s 		= "Nowhere"
		e 		= "Nowhere"
		w 		= "Mountains"
		u 		= "Nowhere"
		d 		= "UnderMurals"
		desc 	= "A strange room-like structure, made of an unknown metallic material, and containing several crystalline murals. A portal seems to lead deeper down."
		fDesc 	= "There appears to be ruins of somekind, with glints of glass gleaming from them."	
		items 	= ("Mural" => mural)
		mov 	= True

mural2  		= Item name fDesc desc
	where
		name 	= "Mural2"
		fDesc 	= "Some kind of mural."
		desc 	= ""

underMurals 	= Location "UnderMurals" n s e w u d desc fDesc items mov
	where
		n 		= "CityEntrance"
		s 		= "Nowhere"
		e 		= "Nowhere"
		w 		= "Nowhere"
		u 		= "Murals"
		d 		= "Nowhere"
		desc 	= "The portal leads deeper into the structure. There are more murals, and though you have clearly descended several hundred feet below the surface, an impossible light still radiates from behind them."
		fDesc 	= "It appears to be a portal leading deep underground."	
		items 	= ("Mural2" => mural2)
		mov 	= True

gameLocations 	= ("Camp"=>camp,"Mound"=>mound,"Mound2"=>mound2,"Mound3"=>mound3,"Mountains"=>mountains,"Ruins"=>ruins,"UnderRuins"=>underRuins,"Murals"=>murals,"UnderMurals"=>underMurals,"Nowhere"=>Location)


demoPlayer 		= Player "casiosk1" 100 "Camp"
demoShoggoth 	= Monster "Shoggoth"
demoGame 		= Game ("casiosk1"=>demoPlayer) ("Shoggoth"=>demoShoggoth) gameLocations

moveFunc cardinal game = movePlayer cardinal (getPlayer "casiosk1" game) game

---------------------------------------------------------------------------------------------------------------------
-- IO Functions
---------------------------------------------------------------------------------------------------------------------

--Main Game loop
madnessLoop game = 
	receive
		[Walk,cardinal,playerName]	-> madnessLoop $ movePlayer cardinal (getPlayer playerName game) game
		[Look,itemName,playerName]	-> madnessLoop $ lookAtItem itemName (getPlayer playerName game) game
		Finish						-> game::narration
		_							-> madnessLoop game

--Why doesn't this work???
--gameActor game = spawn madnessLoop [game]

--walk cardinal playerName = [Walk,cardinal,playerName] :>> #madness
