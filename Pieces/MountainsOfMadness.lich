--Mountains of Madness

-- walk north
--Runes of warding
--Traps / Curses
--One player, Multiple Monsters
--See everyone's text fields, but translate enemy text fields into "lovecraftian" language
--Fixed map, with randomized contents

-- Low: 10 kb/s Med: 50 kb/s High: 200 kb/s

--Story KEYS instead of STORY in demoGame object? Optimization for laterrrr

--pooling data structure.

------------------------------------------------------------------------------------------------
--Data Types
------------------------------------------------------------------------------------------------

--

data Item {
	name  			= "Not an item.",
	farDescription  = "Not an item",
	description 	= "Not an Item.",
	carryable		= True,
	action 			= Nothing,
	curse 			= Nothing
}

data Trap {
	name 			= "Acid Trap",
	description 	= "A jet of acid suddenly shoots from the ground under you. You are burned.",
	attack 			= 20
	dementia		= 5
}

data Location {
	name 			= "Nowhere",
	north 			= "Nowhere",
	south 			= "Nowhere",
	east 			= "Nowhere",
	west 			= "Nowhere",
	up 				= "Nowhere",
	down 			= "Nowhere",
	description 	= "Nothing to see here.",
	farDescription 	= "Nothing to see in the distance.",
	items 			= (),
	moveable 		= False
}

data Player {
	name 		= "New Player",
	health 		= 100,
	location 	= "Nowhere",
	description = "A rather academic looking researcher. Cold, but healthy.",
	items 		= (),
	sanity 		= 100
}

data Monster {
	name 		= "Nobody",
	health 		= 100,
	location 	= "Nowhere",
	description = "Not actually a monster.",
	items 		= (),
	attack 		= 25,
	dementia	= 25
}

data Game {
	players		= (),
	monsters 	= (),
	locations 	= ("Nowhere" => Location),
	narration 	= "You are nowhere.",
	gameOver	= False
}

data Cardinal = North | South | East | West | Up | Down

north 	= North
south 	= South
east 	= East
west 	= West
up 		= Up
down 	= Down

------------------------------------------------------------------------------------------------
--Game Actions
------------------------------------------------------------------------------------------------


-- |addNarration String Game => Game
addNarration story game = game{narration = (game::narration)+"\n"+story}

-- |narrate Game => Game
narrate game = postNarration (game::narration) game

-- |placeItemAtLocation Item Location => Location
placeItemAtLocation item location = location {items = newItems}
	where
		newItems = ((item :: name) => item) : (location :: items)

-- |removeItemFromLocation Item Location => Location
removeItemFromLocation item location = location{items = newItems}
	where
		newItems = delete (item::name) (location::items)

-- |giveItemToPlayer Item Player => Player
giveItemToPlayer item player = player{items = newItems}
	where
		newItems = ((item::name) => item) : (player::items)

-- |removeItemFromPlayer Item Player => Player
removeItemFromPlayer item player = player{items = newItems}
	where
		newItems = delete (item::name) (player::items)

-- |updateLocation Location Game => Game
updateLocation location game = game{locations = newLocations}
	where
		newLocations = ((location::name) => location) : (game::locations)

-- |getLocation String     Game => Player
getLocation locationName game = game::locations !! locationName

-- |getPlayer String     Game => Player
getPlayer playerName game = (game :: players) !! playerName

-- |getMonster String     Game => Player
getMonster monsterName game = (game :: monsters) !! monsterName

--findSomethingWithName String -> Game -> Game
findSomethingWithName name game = player ? monster ? location
	where
		player 		= getPlayer name game
		monster 	= getMonster name game
		location 	= getLocation name game

-- |updatePlayer Player Game => Game
updatePlayer player game = game{players = newPlayers}
	where
		newPlayers = ((player::name) => player) : (game::players)

-- |updateMonster Monster Game => Game
updateMonster monster game = game{monsters = newMonsters}
	where
		newMonsters = (monster::name => monster) : (game::monsters)

-- |moveItemFromPlayerToLocation Item Location Player Game => Game
moveItemFromPlayerToLocation item location player game = updatePlayer newPlayer newGame
	where
		newLocation = placeItemAtLocation 	item location
		newPlayer 	= removeItemFromPlayer 	item player
		newGame		= updateLocation newLocation game

-- |pickupCarryableItemFromLocation Item Location Player Game => Game
pickupCarryableItemFromLocation item location player game = updatePlayer newPlayer newGame
	where
		newLocation = removeItemFromLocation item location
		newPlayer 	= giveItemToPlayer 		 item player
		newGame		= updateLocation newLocation game

-- |pickupItemFromLocation Item Location Player Game => Game
pickupItemFromLocation item location player game = 
	if ((player::location) == (location::name)) && item :: carryable
		then pickupCarryableItemFromLocation item location player game
		else addNarration game "I can't carray that!"

-- |playerLocation Player Game => Location
playerLocation player game = (game::locations) !! (player::location)

-- |locationAtCardinal Cardinal Player Game => Location
locationAtCardinal cardinal player game = newLocation
	where
		oldLocation = playerLocation player game
		newLocation =
			case cardinal of
				North -> getLocation (oldLocation :: north) game
				South -> getLocation (oldLocation :: south) game
				East  -> getLocation (oldLocation :: east ) game
				West  -> getLocation (oldLocation :: west ) game
				Up    -> getLocation (oldLocation :: up   ) game
				Down  -> getLocation (oldLocation :: down ) game

-- |lookAtCardinal Cardinal Player Game => Game
lookAtCardinal cardinal player game = addNarration description game
	where
		description = (locationAtCardinal cardinal player game) :: farDescription

-- |movePlayer Cardinal Player Game => Game
movePlayer cardinal player game = 
	if newLocation::moveable
		then updatePlayer newPlayer game
		else addNarration "That way is blocked." game 
	where
		newLocation 	= locationAtCardinal cardinal player game
		newPlayer 		= player{location=newLocation::name}

moveMonster cardinal monster game = 
	if newLocation::moveable
		then updateMonster newMonster game
		else addNarration "That way is blocked." game 
	where
		newLocation 	= locationAtCardinal cardinal player game
		newMonster 		= monster{location=newLocation::name}

movePlayerOrMonster name cardinal game = newGame
	where
		something = findSomethingWithName name game
		newGame =
			case something of
				Monster -> moveMonster something game
				Player 	-> movePlayer something game
				_		-> game
	
-- |checkPlayerDeath Player Game => Game
checkPlayerDeath player game = 
	if player::health < 1
		then (addNarration "You died." game){gameOver = True}
		else game

-- |damagePlayer Int Player Game => Game
damagePlayer damage player game = checkPlayerDeath damagedPlayer newGame
	where
		newHealth		= player::health - damage
		damagedPlayer 	= player {health = newHealth}
		newGame 		= updatePlayer damagedPlayer game

-- |monsterAttacksPlayer Monster Player Game => Game
monsterAttacksPlayer monster player game = damagePlayer (monster::attack) player game

updateItemInHolder item itemName holder game = newGame
	where
		newHolder = (itemName=>item) : holder::items
		newGame =
			case newHolder of
				(Monster m) 	-> updateMonster newHolder game
				(Player p)	 	-> updatePlayer newHolder game
				(Location l) 	-> updateLocation newHolder game
				_ 				-> game

eraseItemInHolder item holder game = newGame
	where
		newHolder = holder{items = delete (item::name) (holder::items)}
		newGame =
			case newHolder::dataType of
				(Monster m) 	-> updateMonster newHolder game
				(Player p)	 	-> updatePlayer newHolder game
				(Location l) 	-> updateLocation newHolder game
				_ 				-> gam
				
curseItem item aCurse location game = updateItemInHolder newItem (item::name) location game
	where
		newItem = item{curse = aCurse}

nullAction item holder receiver game = addNarration game "That has no effect."

--useItemOnSomething String -> String -> String -> Game -> Game
useItemOnSomething playerName itemName receiverName game = (item::action) item player something game
	where
		player 		= getPlayer playerName game
		item 		= play::items !! itemName
		something 	= findSomethingWithName

--contains :: a -> Dict -> Bool
containsKey key dict = (dict !! key) != Nothing

--nullAction:: Item -> a -> b -> Game -> Game
nullAction item holder receiver game = addNarration game "That has no effect."

--closedMetalDoor :: String -> Item
closedMetalDoor name = Item name farDescription description carryable action curse
	where
		farDescription  = "A sturdy looking metal door. It's closed.",
		description 	= "Seems to be made of stern stuff. Not getting through here without the key.",
		carryable		= False,
		action 			= Nothing,
		curse 			= Nothing

--openedMetalDoor :: String -> Item
openedMetalDoor name = Item name farDescription description carryable action curse
	where
		farDescription  = "A sturdy looking metal door. It's wide open.",
		description 	= "Seems to be made of stern stuff.",
		carryable		= False,
		action 			= Nothing,
		curse 			= Nothing

--openDoorWithKey :: Item -> Player -> Location -> Game -> Game
openDoorWithKey key player door location game = newGame
	where
		newDoor 	= openedMetalDoor "OpenMetalDoor"
		newPlayer 	= removeItemFromPlayer key player
		newLocation = placeItemAtLocation newDoor
		newGame 	= 
			if member (door::name) (location::items)
				then updatePlayer newPlayer $ updateLocation newLocation game
				else game

--closeDoor :: String -> Location -> Game -> Game
closeDoor doorName location game = newGame
	where
		newDoor 	= closedMetalDoor "ClosedMetalDoor"
		newLocation = placeItemAtLocation newDoor
		newGame 	=
			if member (doorName) (location::items)
				then updateLocation newLocation game
				else game

--key :: Item
key = Item name farDescription description carryable action curse
	where
		name  			= "Key",
		farDescription  = "A metal key.",
		description 	= "The key appears to be made from some kind of metal. Strangely you can feel a slight vibration and warmth emmiting from it.",
		carryable		= True,
		action 			= openDoorWithKey,
		curse 			= Nothing


------------------------------------------------------------------------------------------------
--Items and Locations
------------------------------------------------------------------------------------------------

--Zork Above ground
--29 	Rooms
--40ish Connections

--Mountains of Madness
--18 	Rooms
--19 	Connections

--Baroque leit motiff?

------------------------------------------------------------------------------------------------
--ASCII MAP
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
----------------------------------------------[Exit2]-------------------------------------------
------------------------------------------------||----------------------------------------------
------------------------------------[Exit1]==[IcePlateau]==[Exit3]------------------------------
-----------------------------------------------||-----------------------------------------------
--------------------------------------------[RuneStairs]----------------------------------------
-----------------------------------------------U|-----------------------------------------------
-----------------------------------------------U|-----------------------------------------------
---------------------------[SecretVault]====[RuneTunnel]----------------------------------------
-------------------------------||---------------------------------------------------------------
------------------------||===[Library]===||-----------------------------------------------------
------------------------||---------------||-----------------------------------------------------
------------------------||---------------||-----------------------------------------------------
----------------[UndergroundLake]===[CityCenter]------------------------------------------------
-----------------------------------------||-----------------------------------------------------
-----------------------------||====[CityEntrance]===||------------------------------------------
-----------------------------||---------------------||------------------------------------------
-------------------------[UnderRuins]-----------[MuralsBottom]----------------------------------
-----------------------------D|---------------------D|------------------------------------------
--------------------------[Ruins]===[Mountains]===[MuralsTop]-----------------------------------
-----------------------------------------||-----------------------------------------------------
-----------------------------------------||-----------------------------------------------------
---------------------------------||====[mound]====||--------------------------------------------
---------------------------------||      ||       ||--------------------------------------------
-----------------------------[mound2]==[Camp]==[mound3]-----------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

acidTrap		= Trap name desc attack demen
	where
		name 	= "Acid Trap",
		desc 	= "A jet of acid suddenly shoots from the ground under you. You are burned.",
		attack 	= 20
		demen	= 5

revelation		= Trap name desc attack demen
	where
		name 	= "A hideous revelation",
		desc 	= "All at once an insane revelation enters your mind. You are overcome with a vision from beyond dimensions, revealing to you just how small a mote your existence is in comparision to the vast NOTHINGNESS of the entire universe. You feel yourself losing grip with sanity.",
		attack 	= 0
		demen	= 20

-- |dogCorpse 	=>Item
dogCorpse 		= Item name fDesc desc
	where
		name 	= "DogCorpse"
		fDesc 	= "A dessicated dog corpse."
		desc 	= "Upon closer inspection you find that it appears to have been...dissected."

-- |corpse2 	=>Item
corpse 			= Item name fDesc desc
	where
		name 	= "Corpse"
		fDesc 	= "The dessicated corpse of an antarctic researcher."
		desc 	= "It appears to have been...dissected. The brain is removed, as are several organs. The incisions appear to have been done with surgical precision."

corpse2 		= Item name fDesc desc
	where
		name 	= "Corpse2"
		fDesc 	= "A bloated corpse of a scientist"
		desc 	= "Several of the scientist's limbs appear to have been amputated. This was not done by a wild animal as the wounds have been cauterized."

camp 			= Location "Camp" n s e w u d desc fDesc items mov
	where
		n 		= "Mound"
		s 		= "Nothing"
		e 		= "Mound3"
		w 		= "Mound2"
		u 		= "Nothing"
		d 		= "Nothing"
		desc 	= "A base camp for a previous expedition to Antartica."
		fDesc 	= "You see a white blasted, frigid looking camp."	
		items 	= ()
		mov 	= True

mound 		= Location "Mound" n s e w u d desc fDesc items mov
	where
		n 		= "Mountains"
		s 		= "Camp"
		e 		= "Mound3"
		w 		= "Mound2"
		u 		= "Nothing"
		d 		= "Nothing"
		desc 	= "A strange greenish mound in the snow. There appears to be something at the top of it."
		fDesc 	= "the vauge outline of a small hill of some kind in the snow."	
		items 	= ("DogCorpse" => dogCorpse)
		mov 	= True

mound2  		= Location "Mound2" n s e w u d desc fDesc items mov
	where
		n 		= "Mound"
		s 		= "Nothing"
		e 		= "Camp"
		w 		= "Nothing"
		u 		= "Nothing"
		d 		= "Nothing"
		desc 	= "A strange redish mound in the snow. There appears to be something at the top of it."
		fDesc 	= "the vauge outline of a small hill of some kind in the snow."	
		items 	= ("Corpse" => corpse)
		mov 	= True

mound3 			= Location "Mound3" n s e w u d desc fDesc items mov
	where
		n 		= "Mound"
		s 		= "Nothing"
		e 		= "Nothing"
		w 		= "Camp"
		u 		= "Nothing"
		d 		= "Nothing"
		desc 	= "A strange brownish mound in the snow. There appears to be something at the top of it."
		fDesc 	= "the vauge outline of a small hill of some kind in the snow."	
		items 	= ("Corpse2" => corpse2)
		mov 	= True

mountains 	 	= Location "Mountains" n s e w u d desc fDesc items mov
	where
		n 		= "Nothing"
		s 		= "Mound"
		e 		= "MuralsTop"
		w 		= "Ruins"
		u 		= "Nothing"
		d 		= "Nothing"
		desc 	= "A series of precipitous and daunting cliffs. Arduous hiking."
		fDesc 	= "the peaks of a chain of peaks and cliffs. Looks dangerous."	
		items 	= ()
		mov 	= True	

ruins 	 		= Location "Ruins" n s e w u d desc fDesc items mov
	where
		n 		= "Nothing"
		s 		= "Nothing"
		e 		= "Mountains"
		w 		= "Nothing"
		u 		= "Nothing"
		d 		= "UnderRuins"
		desc 	= "There are eldritch ruins; crumbling and falling, yet still holding some of their previous strange, and even dangerous, beauty."
		fDesc 	= "What appears to be ancient ruins of some sort of city."	
		items 	= ()
		mov 	= True

carvings 		= Item name fDesc description
	where
		name 	= "Carvings"
		fdesc 	= "Ornate carvings."
		desc 	= "Otherworldly carvings which depict, minimally yet beautifully, a large underground city. On closer inspection strange creatures can be seen inhabiting the structures. They appear to be dissecting...or dining...on something."

underRuins 		= Location "UnderRuins" n s e w u d desc fDesc items mov
	where
		n 		= "CityEntrance"
		s 		= "Nothing"
		e 		= "Nothing"
		w 		= "Nothing"
		u 		= "Ruins"
		d 		= "UnderRuins"
		desc 	= "The structures open up into an intricately carved passageway."
		fDesc 	= "There seems to be some kind of passageway leading underground."	
		items 	= ("Carvings" => carvings)
		mov 	= True


mural 	 		= Item name fDesc description
	where
		name 	= "Mural"
		fdesc 	= "Some kind of mural."
		desc 	= "An intricately constructed mural, made of some kind of crystalline materia. Seems almost religious or iconic in nature. Depicts a vaugely orb shaped creature with a multitude of appendages and sub-orb like structures. It appears to be swallowing something...or perhaps talking to it?"

murals 	 		= Location "Murals" n s e w u d desc fDesc items mov
	where
		n 		= "Nothing"
		s 		= "Nothing"
		e 		= "Nothing"
		w 		= "Mountains"
		u 		= "Nothing"
		d 		= "UnderMurals"
		desc 	= "A strange room-like structure, made of an unknown metallic material, and containing several crystalline murals. A portal seems to lead deeper down."
		fDesc 	= "There appears to be ruins of somekind, with glints of glass gleaming from them."	
		items 	= ("Mural" => mural)
		mov 	= True

mural2  		= Item name fDesc description
	where
		name 	= "Mural2"
		fdesc 	= "Some kind of mural."
		desc 	= ""

underMurals 	= Location "UnderMurals" n s e w u d desc fDesc items mov
	where
		n 		= "CityEntrance"
		s 		= "Nothing"
		e 		= "Nothing"
		w 		= "Nothing"
		u 		= "Murals"
		d 		= "Nothing"
		desc 	= "The portal leads deeper into the structure. There are more murals, and though you have clearly descended several hundred feet below the surface, an impossible light still radiates from behind them."
		fDesc 	= "It appears to be a portal leading deep underground."	
		items 	= ("Mural2" => mural2)
		mov 	= True

gameLocations 	 = finalDic
	where
		locDic   = ("Camp"=>camp,"Mound"=>mound,"Mound2"=>mound2,"Mound3"=>mound3,"Mountains"=>mountains)
		locDic2  = ("Ruins"=>ruins,"UnderRuins"=>underRuins,"Murals"=>murals,"UnderMurals"=>underMurals)
		finalDic =  locDic : locDic2



demoPlayer 		= Player "casiosk1" 100 "Camp"
demoShoggoth 	= Monster "Shoggoth"
demoGame 		= Game ("casiosk1"=>demoPlayer) ("Shoggoth"=>demoShoggoth) gameLocations

---------------------------------------------------------------------------------------------------------------------
-- IO Functions
---------------------------------------------------------------------------------------------------------------------

--Main Game loop
madnessLoop game = 
	receive m of
		(\x->)		->  madnessLoop . narrate $ m game
		"finished" 	-> print "Finished!"

--Starts the main game loop
startMountainsOfMadness playerName = spawn "madnessLoop" madnessLoop [newGame]
	where
		newPlayer 	= Player playerName 100 "Camp"
		newGame 	= Game (playerName=>newPlayer) () gameLocations

--Sends the game loop a message walk a direction
walk cardinal playerName = walkFunc :>> "madnessLoop"
	where
		walkFunc game = movePlayerOrMonster playerName cardinal game

--Sends the main game loop a message to look at a direction
look cardinal playerName = lookFunc :>> "madnessLoop"  
	where
		lookFunc game = lookAtCardinal cardinal (findSomethingWithName playerName game) game



