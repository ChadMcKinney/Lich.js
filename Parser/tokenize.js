Lich.Parser.tokenize = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "lexeme": parse_lexeme,
        "literal": parse_literal,
        "special": parse_special,
        "whitespace": parse_whitespace,
        "whitestuff": parse_whitestuff,
        "whitechar": parse_whitechar,
        "newline": parse_newline,
        "return": parse_return,
        "linefeed": parse_linefeed,
        "vertab": parse_vertab,
        "formfeed": parse_formfeed,
        "space": parse_space,
        "tab": parse_tab,
        "comment": parse_comment,
        "dashes": parse_dashes,
        "opencom": parse_opencom,
        "closecom": parse_closecom,
        "ncomment": parse_ncomment,
        "ANYseq": parse_ANYseq,
        "ANY": parse_ANY,
        "any": parse_any,
        "graphic": parse_graphic,
        "small": parse_small,
        "ascSmall": parse_ascSmall,
        "ascLarge": parse_ascLarge,
        "symbol": parse_symbol,
        "ascSymbol": parse_ascSymbol,
        "ascDigit": parse_ascDigit,
        "octit": parse_octit,
        "hexit": parse_hexit,
        "varid": parse_varid,
        "conid": parse_conid,
        "reservedid": parse_reservedid,
        "varsym": parse_varsym,
        "consym": parse_consym,
        "reservedop": parse_reservedop,
        "qvarid": parse_qvarid,
        "qconid": parse_qconid,
        "qvarsym": parse_qvarsym,
        "qconsym": parse_qconsym,
        "varid_e": parse_varid_e,
        "conid_e": parse_conid_e,
        "varsym_e": parse_varsym_e,
        "consym_e": parse_consym_e,
        "decimal": parse_decimal,
        "octal": parse_octal,
        "hexadecimal": parse_hexadecimal,
        "integer": parse_integer,
        "notdecimal": parse_notdecimal,
        "float": parse_float,
        "exponent": parse_exponent,
        "char": parse_char,
        "string": parse_string,
        "stringchar": parse_stringchar,
        "escape": parse_escape,
        "escapestuff": parse_escapestuff,
        "charesc": parse_charesc,
        "ascii": parse_ascii,
        "cntrl": parse_cntrl,
        "gap": parse_gap
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        result1 = parse_whitespace();
        if (result1 === null) {
          result1 = parse_lexeme();
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_whitespace();
            if (result1 === null) {
              result1 = parse_lexeme();
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_lexeme() {
        var result0;
        
        result0 = parse_varid_e();
        if (result0 === null) {
          result0 = parse_conid_e();
          if (result0 === null) {
            result0 = parse_varsym_e();
            if (result0 === null) {
              result0 = parse_consym_e();
              if (result0 === null) {
                result0 = parse_qvarid();
                if (result0 === null) {
                  result0 = parse_qconid();
                  if (result0 === null) {
                    result0 = parse_qvarsym();
                    if (result0 === null) {
                      result0 = parse_qconsym();
                      if (result0 === null) {
                        result0 = parse_literal();
                        if (result0 === null) {
                          result0 = parse_special();
                          if (result0 === null) {
                            result0 = parse_reservedop();
                            if (result0 === null) {
                              result0 = parse_reservedid();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_literal() {
        var result0;
        
        result0 = parse_integer();
        if (result0 === null) {
          result0 = parse_float();
          if (result0 === null) {
            result0 = parse_char();
            if (result0 === null) {
              result0 = parse_string();
            }
          }
        }
        return result0;
      }
      
      function parse_special() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 41) {
            result0 = ")";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 44) {
              result0 = ",";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 59) {
                result0 = ";";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 91) {
                  result0 = "[";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"[\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 93) {
                    result0 = "]";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 96) {
                      result0 = "`";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"`\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 123) {
                        result0 = "{";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"{\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 125) {
                          result0 = "}";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {return {val: s, typ: s}})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_whitestuff();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_whitestuff();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {return {val: w.join("")}})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_whitestuff() {
        var result0;
        
        result0 = parse_whitechar();
        if (result0 === null) {
          result0 = parse_comment();
          if (result0 === null) {
            result0 = parse_ncomment();
          }
        }
        return result0;
      }
      
      function parse_whitechar() {
        var result0;
        
        result0 = parse_newline();
        if (result0 === null) {
          result0 = parse_vertab();
          if (result0 === null) {
            result0 = parse_space();
            if (result0 === null) {
              result0 = parse_tab();
            }
          }
        }
        return result0;
      }
      
      function parse_newline() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_return();
        if (result0 !== null) {
          result1 = parse_linefeed();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_linefeed();
          if (result0 === null) {
            result0 = parse_formfeed();
          }
        }
        return result0;
      }
      
      function parse_return() {
        var result0;
        
        if (input.charCodeAt(pos) === 13) {
          result0 = "\r";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\"");
          }
        }
        return result0;
      }
      
      function parse_linefeed() {
        var result0;
        
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        return result0;
      }
      
      function parse_vertab() {
        var result0;
        
        if (input.charCodeAt(pos) === 11) {
          result0 = "\x0B";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\x0B\"");
          }
        }
        return result0;
      }
      
      function parse_formfeed() {
        var result0;
        
        if (input.charCodeAt(pos) === 12) {
          result0 = "\f";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\f\"");
          }
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return result0;
      }
      
      function parse_tab() {
        var result0;
        
        if (input.charCodeAt(pos) === 9) {
          result0 = "\t";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\t\"");
          }
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_dashes();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          pos4 = pos;
          reportFailures++;
          result1 = parse_symbol();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = parse_any();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_any();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_any();
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_newline();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ds, n) {return n})(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_dashes() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 45) {
            result2 = "-";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos) === 45) {
                result2 = "-";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d, ds) {return d.concat(ds.join(""))})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_opencom() {
        var result0;
        
        if (input.substr(pos, 2) === "{-") {
          result0 = "{-";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{-\"");
          }
        }
        return result0;
      }
      
      function parse_closecom() {
        var result0;
        
        if (input.substr(pos, 2) === "-}") {
          result0 = "-}";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-}\"");
          }
        }
        return result0;
      }
      
      function parse_ncomment() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_symbol();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_opencom();
          if (result1 !== null) {
            result2 = parse_ANYseq();
            if (result2 !== null) {
              result3 = [];
              pos3 = pos;
              result4 = parse_ncomment();
              if (result4 !== null) {
                result5 = parse_ANYseq();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos3;
                }
              } else {
                result4 = null;
                pos = pos3;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos3 = pos;
                result4 = parse_ncomment();
                if (result4 !== null) {
                  result5 = parse_ANYseq();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
              }
              if (result3 !== null) {
                result4 = parse_closecom();
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, com) {return flatten(com).join("").replace(/\S/g," ");})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ANYseq() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_ANY();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ANY();
        }
        if (result0 !== null) {
          result0 = (function(offset, as) {return as.join("")})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ANY() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_opencom();
        if (result0 === null) {
          result0 = parse_closecom();
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_graphic();
          if (result1 === null) {
            result1 = parse_whitechar();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, a) {return a})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_any() {
        var result0;
        
        result0 = parse_graphic();
        if (result0 === null) {
          result0 = parse_space();
          if (result0 === null) {
            result0 = parse_tab();
          }
        }
        return result0;
      }
      
      function parse_graphic() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_small();
        if (result0 === null) {
          result0 = parse_ascLarge();
          if (result0 === null) {
            result0 = parse_symbol();
            if (result0 === null) {
              result0 = parse_ascDigit();
              if (result0 === null) {
                result0 = parse_special();
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 34) {
                    result0 = "\"";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\"\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 39) {
                      result0 = "'";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"'\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, g) {return (g instanceof Object? g.val:g)})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_small() {
        var result0;
        
        result0 = parse_ascSmall();
        if (result0 === null) {
          if (input.charCodeAt(pos) === 95) {
            result0 = "_";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
        }
        return result0;
      }
      
      function parse_ascSmall() {
        var result0;
        
        if (/^[a-z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        return result0;
      }
      
      function parse_ascLarge() {
        var result0;
        
        if (/^[A-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_ascSymbol();
        if (result0 !== null) {
          result0 = (function(offset, s) {return s})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ascSymbol() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_opencom();
        if (result0 === null) {
          result0 = parse_closecom();
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 33) {
            result1 = "!";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"!\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 35) {
              result1 = "#";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"#\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 36) {
                result1 = "$";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"$\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 37) {
                  result1 = "%";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"%\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 38) {
                    result1 = "&";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"&\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 42) {
                      result1 = "*";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result1 = "+";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 46) {
                          result1 = ".";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\".\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 47) {
                            result1 = "/";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"/\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 60) {
                              result1 = "<";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"<\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 62) {
                                result1 = ">";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\">\"");
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 61) {
                                  result1 = "=";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"=\"");
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 63) {
                                    result1 = "?";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"?\"");
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 64) {
                                      result1 = "@";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"@\"");
                                      }
                                    }
                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 92) {
                                        result1 = "\\";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"\\\\\"");
                                        }
                                      }
                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 94) {
                                          result1 = "^";
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"^\"");
                                          }
                                        }
                                        if (result1 === null) {
                                          if (input.charCodeAt(pos) === 124) {
                                            result1 = "|";
                                            pos++;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"|\"");
                                            }
                                          }
                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 45) {
                                              result1 = "-";
                                              pos++;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"-\"");
                                              }
                                            }
                                            if (result1 === null) {
                                              if (input.charCodeAt(pos) === 126) {
                                                result1 = "~";
                                                pos++;
                                              } else {
                                                result1 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"~\"");
                                                }
                                              }
                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 58) {
                                                  result1 = ":";
                                                  pos++;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\":\"");
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {return s})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ascDigit() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_octit() {
        var result0;
        
        if (/^[0-7]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-7]");
          }
        }
        return result0;
      }
      
      function parse_hexit() {
        var result0;
        
        result0 = parse_ascDigit();
        if (result0 === null) {
          if (/^[A-F]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[A-F]");
            }
          }
          if (result0 === null) {
            if (/^[a-f]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[a-f]");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_varid() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_reservedid();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_small();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_small();
            if (result3 === null) {
              result3 = parse_ascLarge();
              if (result3 === null) {
                result3 = parse_ascDigit();
                if (result3 === null) {
                  if (input.charCodeAt(pos) === 39) {
                    result3 = "'";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"'\"");
                    }
                  }
                }
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_small();
              if (result3 === null) {
                result3 = parse_ascLarge();
                if (result3 === null) {
                  result3 = parse_ascDigit();
                  if (result3 === null) {
                    if (input.charCodeAt(pos) === 39) {
                      result3 = "'";
                      pos++;
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"'\"");
                      }
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {return head.concat(tail.join(""))})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_conid() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_ascLarge();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_small();
          if (result2 === null) {
            result2 = parse_ascLarge();
            if (result2 === null) {
              result2 = parse_ascDigit();
              if (result2 === null) {
                if (input.charCodeAt(pos) === 39) {
                  result2 = "'";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"'\"");
                  }
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_small();
            if (result2 === null) {
              result2 = parse_ascLarge();
              if (result2 === null) {
                result2 = parse_ascDigit();
                if (result2 === null) {
                  if (input.charCodeAt(pos) === 39) {
                    result2 = "'";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"'\"");
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {return head.concat(tail.join(""))})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_reservedid() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6) === "hiding") {
          result0 = "hiding";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"hiding\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "case") {
            result0 = "case";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"case\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 5) === "class") {
              result0 = "class";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"class\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 4) === "data") {
                result0 = "data";
                pos += 4;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"data\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 7) === "default") {
                  result0 = "default";
                  pos += 7;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"default\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 8) === "deriving") {
                    result0 = "deriving";
                    pos += 8;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"deriving\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 2) === "do") {
                      result0 = "do";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"do\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 4) === "else") {
                        result0 = "else";
                        pos += 4;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"else\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 7) === "foreign") {
                          result0 = "foreign";
                          pos += 7;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"foreign\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 2) === "if") {
                            result0 = "if";
                            pos += 2;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"if\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 6) === "import") {
                              result0 = "import";
                              pos += 6;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"import\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 6) === "infixl") {
                                result0 = "infixl";
                                pos += 6;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"infixl\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 6) === "infixr") {
                                  result0 = "infixr";
                                  pos += 6;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"infixr\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 5) === "infix") {
                                    result0 = "infix";
                                    pos += 5;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"infix\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 8) === "instance") {
                                      result0 = "instance";
                                      pos += 8;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"instance\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos, 2) === "in") {
                                        result0 = "in";
                                        pos += 2;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"in\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos, 3) === "let") {
                                          result0 = "let";
                                          pos += 3;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"let\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos, 3) === "def") {
                                            result0 = "def";
                                            pos += 3;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"def\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos, 6) === "module") {
                                              result0 = "module";
                                              pos += 6;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"module\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos, 7) === "newtype") {
                                                result0 = "newtype";
                                                pos += 7;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"newtype\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos, 2) === "of") {
                                                  result0 = "of";
                                                  pos += 2;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"of\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos, 4) === "then") {
                                                    result0 = "then";
                                                    pos += 4;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"then\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos, 4) === "type") {
                                                      result0 = "type";
                                                      pos += 4;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"type\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos, 5) === "where") {
                                                        result0 = "where";
                                                        pos += 5;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"where\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.charCodeAt(pos) === 95) {
                                                          result0 = "_";
                                                          pos++;
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"_\"");
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_varid();
          if (result1 === null) {
            result1 = parse_reservedid();
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, res) {return {val: res, typ: res}})(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_varsym() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_reservedop();
        if (result0 === null) {
          result0 = parse_dashes();
          if (result0 === null) {
            result0 = parse_escape();
            if (result0 === null) {
              if (input.charCodeAt(pos) === 58) {
                result0 = ":";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
            }
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result2 = parse_symbol();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_symbol();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {return s.join("")})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_consym() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_reservedop();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_symbol();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_symbol();
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {return flatten(s).join("")})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_reservedop() {
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "..") {
          result0 = "..";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"..\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "::") {
            result0 = "::";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"::\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 58) {
              result0 = ":";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "=>") {
                result0 = "=>";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=>\"");
                }
              }
              if (result0 === null) {
                pos2 = pos;
                if (input.charCodeAt(pos) === 61) {
                  result0 = "=";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result0 !== null) {
                  pos3 = pos;
                  reportFailures++;
                  if (input.charCodeAt(pos) === 61) {
                    result1 = "=";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                  reportFailures--;
                  if (result1 === null) {
                    result1 = "";
                  } else {
                    result1 = null;
                    pos = pos3;
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
                if (result0 === null) {
                  pos2 = pos;
                  if (input.charCodeAt(pos) === 92) {
                    result0 = "\\";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\\\"");
                    }
                  }
                  if (result0 !== null) {
                    pos3 = pos;
                    reportFailures++;
                    result1 = parse_escapestuff();
                    reportFailures--;
                    if (result1 === null) {
                      result1 = "";
                    } else {
                      result1 = null;
                      pos = pos3;
                    }
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos2;
                    }
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                  if (result0 === null) {
                    pos2 = pos;
                    if (input.charCodeAt(pos) === 124) {
                      result0 = "|";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"|\"");
                      }
                    }
                    if (result0 !== null) {
                      pos3 = pos;
                      reportFailures++;
                      if (input.charCodeAt(pos) === 124) {
                        result1 = "|";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"|\"");
                        }
                      }
                      reportFailures--;
                      if (result1 === null) {
                        result1 = "";
                      } else {
                        result1 = null;
                        pos = pos3;
                      }
                      if (result1 !== null) {
                        result0 = [result0, result1];
                      } else {
                        result0 = null;
                        pos = pos2;
                      }
                    } else {
                      result0 = null;
                      pos = pos2;
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 2) === "<-") {
                        result0 = "<-";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"<-\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 2) === "->") {
                          result0 = "->";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"->\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 64) {
                            result0 = "@";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"@\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 126) {
                              result0 = "~";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"~\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_varsym();
          if (result1 === null) {
            result1 = parse_consym();
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, op) {return {val: (op instanceof Array)? op.join(""): op, typ: (op instanceof Array)? op.join(""): op}})(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_qvarid() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result1 = parse_conid();
        if (result1 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result2 = ".";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            result1 = parse_conid();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result2 = ".";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          pos4 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = parse_varid();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, qs, ref) {qs = flatten(qs).join(""); return {val: flatten([qs, ref[0]]).join(""), typ: "qvarid", qual: qs.substr(0,qs.length-1)}})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_qconid() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result1 = parse_conid();
        if (result1 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result2 = ".";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            result1 = parse_conid();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result2 = ".";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          pos4 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = parse_conid();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, qs, ref) {qs = flatten(qs).join(""); return {val: flatten([qs, ref[0]]).join(""), typ: "qconid", qual: qs.substr(0,qs.length-1)}})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_qvarsym() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result1 = parse_conid();
        if (result1 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result2 = ".";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            result1 = parse_conid();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result2 = ".";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_varsym();
          if (result1 !== null) {
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, qs, ref) {qs = flatten(qs).join(""); return {val: flatten([qs, ref[0]]).join(""), typ: "qvarsym", qual: qs.substr(0,qs.length-1)}})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_qconsym() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result1 = parse_conid();
        if (result1 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result2 = ".";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            result1 = parse_conid();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result2 = ".";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          pos4 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = parse_consym();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, qs, ref) {qs = flatten(qs).join(""); return {val: flatten([qs, ref[0]]).join(""), typ: "qconsym", qual: qs.substr(0,qs.length-1)}})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_varid_e() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_varid();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) {return {val: v, typ: "varid"}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_conid_e() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_conid();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {return {val: c, typ: "conid"}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_varsym_e() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_varsym();
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) {return {val: v, typ: "varsym"}})(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_consym_e() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_consym();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {return {val: c, typ: "consym"}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_decimal() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_ascDigit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ascDigit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, d) {return d.join("")})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_octal() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_octit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_octit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, o) {return o.join("")})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hexadecimal() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_hexit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_hexit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, h) {return h.join("")})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_notdecimal();
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_decimal();
          if (result0 !== null) {
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 111) {
              result1 = "o";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"o\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 79) {
                result1 = "O";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"O\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 120) {
                  result1 = "x";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"x\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 88) {
                    result1 = "X";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"X\"");
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, i) {return {val: i.join(""), typ: "integer"}})(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_notdecimal() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "0o") {
          result0 = "0o";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0o\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_octal();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "0O") {
            result0 = "0O";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"0O\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_octal();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 2) === "0x") {
              result0 = "0x";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0x\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_hexadecimal();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (input.substr(pos, 2) === "0X") {
                result0 = "0X";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0X\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_hexadecimal();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_float() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_decimal();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_decimal();
            if (result2 !== null) {
              result3 = parse_exponent();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_decimal();
          if (result0 !== null) {
            result1 = parse_exponent();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, f) {return {val: f.join(""), typ: "float"}})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_exponent() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 101) {
          result0 = "e";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"e\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 69) {
            result0 = "E";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"E\"");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 43) {
            result1 = "+";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"+\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 45) {
              result1 = "-";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_decimal();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) {return e.join("")})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_char() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 39) {
            result1 = "'";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 92) {
              result1 = "\\";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            result2 = parse_graphic();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            result1 = parse_space();
            if (result1 === null) {
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              if (input.substr(pos, 2) === "\\&") {
                result1 = "\\&";
                pos += 2;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\&\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = pos3;
              }
              if (result1 !== null) {
                result2 = parse_escape();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {return {val: ("'" + c.join("") + "'"), typ: "char"}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_stringchar();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_stringchar();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, bod) {return {val: ('"' + bod.join("") + '"'), typ: "string"}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_stringchar() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_space();
          if (result1 === null) {
            result1 = parse_escape();
            if (result1 === null) {
              result1 = parse_graphic();
              if (result1 === null) {
                result1 = parse_gap();
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ch) {return ch})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_escape() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 92) {
          result0 = "\\";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_escapestuff();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, esc) {return esc.join("")})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_escapestuff() {
        var result0, result1;
        var pos0;
        
        result0 = parse_charesc();
        if (result0 === null) {
          result0 = parse_ascii();
          if (result0 === null) {
            result0 = parse_decimal();
            if (result0 === null) {
              pos0 = pos;
              if (input.charCodeAt(pos) === 111) {
                result0 = "o";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"o\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_octal();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                if (input.charCodeAt(pos) === 120) {
                  result0 = "x";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"x\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_hexadecimal();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_charesc() {
        var result0;
        
        if (input.charCodeAt(pos) === 97) {
          result0 = "a";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"a\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 98) {
            result0 = "b";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"b\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 102) {
              result0 = "f";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"f\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 110) {
                result0 = "n";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"n\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 114) {
                  result0 = "r";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"r\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 116) {
                    result0 = "t";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 118) {
                      result0 = "v";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"v\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 92) {
                        result0 = "\\";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\\\\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 34) {
                          result0 = "\"";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\\"\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 39) {
                            result0 = "'";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"'\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 38) {
                              result0 = "&";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"&\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_ascii() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 94) {
          result0 = "^";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_cntrl();
          if (result1 !== null) {
            if (input.substr(pos, 3) === "&#0") {
              result2 = "&#0";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"&#0\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "&#1") {
            result0 = "&#1";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"&#1\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "&#2") {
              result0 = "&#2";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"&#2\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 3) === "&#3") {
                result0 = "&#3";
                pos += 3;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&#3\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 3) === "&#4") {
                  result0 = "&#4";
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"&#4\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 3) === "&#5") {
                    result0 = "&#5";
                    pos += 3;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"&#5\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 3) === "&#6") {
                      result0 = "&#6";
                      pos += 3;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"&#6\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 3) === "&#7") {
                        result0 = "&#7";
                        pos += 3;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"&#7\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 3) === "&#8") {
                          result0 = "&#8";
                          pos += 3;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"&#8\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 3) === "&#9") {
                            result0 = "&#9";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"&#9\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 4) === "&#10") {
                              result0 = "&#10";
                              pos += 4;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"&#10\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 4) === "&#11") {
                                result0 = "&#11";
                                pos += 4;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"&#11\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 4) === "&#12") {
                                  result0 = "&#12";
                                  pos += 4;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"&#12\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 4) === "&#13") {
                                    result0 = "&#13";
                                    pos += 4;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"&#13\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 4) === "&#14") {
                                      result0 = "&#14";
                                      pos += 4;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"&#14\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos, 4) === "&#15") {
                                        result0 = "&#15";
                                        pos += 4;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"&#15\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos, 4) === "&#16") {
                                          result0 = "&#16";
                                          pos += 4;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"&#16\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos, 4) === "&#17") {
                                            result0 = "&#17";
                                            pos += 4;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"&#17\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos, 4) === "&#18") {
                                              result0 = "&#18";
                                              pos += 4;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"&#18\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos, 4) === "&#19") {
                                                result0 = "&#19";
                                                pos += 4;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"&#19\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos, 4) === "&#20") {
                                                  result0 = "&#20";
                                                  pos += 4;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"&#20\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos, 4) === "&#21") {
                                                    result0 = "&#21";
                                                    pos += 4;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"&#21\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos, 4) === "&#22") {
                                                      result0 = "&#22";
                                                      pos += 4;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"&#22\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos, 4) === "&#23") {
                                                        result0 = "&#23";
                                                        pos += 4;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"&#23\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.substr(pos, 4) === "&#24") {
                                                          result0 = "&#24";
                                                          pos += 4;
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"&#24\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (input.substr(pos, 4) === "&#25") {
                                                            result0 = "&#25";
                                                            pos += 4;
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"&#25\"");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (input.substr(pos, 4) === "&#26") {
                                                              result0 = "&#26";
                                                              pos += 4;
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"&#26\"");
                                                              }
                                                            }
                                                            if (result0 === null) {
                                                              if (input.substr(pos, 4) === "&#27") {
                                                                result0 = "&#27";
                                                                pos += 4;
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"&#27\"");
                                                                }
                                                              }
                                                              if (result0 === null) {
                                                                if (input.substr(pos, 4) === "&#28") {
                                                                  result0 = "&#28";
                                                                  pos += 4;
                                                                } else {
                                                                  result0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\"&#28\"");
                                                                  }
                                                                }
                                                                if (result0 === null) {
                                                                  if (input.substr(pos, 4) === "&#29") {
                                                                    result0 = "&#29";
                                                                    pos += 4;
                                                                  } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("\"&#29\"");
                                                                    }
                                                                  }
                                                                  if (result0 === null) {
                                                                    if (input.substr(pos, 4) === "&#30") {
                                                                      result0 = "&#30";
                                                                      pos += 4;
                                                                    } else {
                                                                      result0 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("\"&#30\"");
                                                                      }
                                                                    }
                                                                    if (result0 === null) {
                                                                      if (input.substr(pos, 4) === "&#31") {
                                                                        result0 = "&#31";
                                                                        pos += 4;
                                                                      } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                          matchFailed("\"&#31\"");
                                                                        }
                                                                      }
                                                                      if (result0 === null) {
                                                                        if (input.substr(pos, 4) === "&#32") {
                                                                          result0 = "&#32";
                                                                          pos += 4;
                                                                        } else {
                                                                          result0 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("\"&#32\"");
                                                                          }
                                                                        }
                                                                        if (result0 === null) {
                                                                          if (input.substr(pos, 5) === "&#127") {
                                                                            result0 = "&#127";
                                                                            pos += 5;
                                                                          } else {
                                                                            result0 = null;
                                                                            if (reportFailures === 0) {
                                                                              matchFailed("\"&#127\"");
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_cntrl() {
        var result0;
        
        result0 = parse_ascLarge();
        if (result0 === null) {
          if (input.charCodeAt(pos) === 64) {
            result0 = "@";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 93) {
                  result0 = "]";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 94) {
                    result0 = "^";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"^\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result0 = "_";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_gap() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 92) {
          result0 = "\\";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_whitechar();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitechar();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 92) {
              result2 = "\\";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      function flatten(array){
          var flat = [];
          for (var i = 0, l = array.length; i < l; i++){
              var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();
              if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? flatten(array[i]) : array[i]); }
          }
          return flat;
      }
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
