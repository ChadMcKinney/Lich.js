/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var LichParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start_":3,"{":4,"exp":5,"}":6,"EOF":7,"module_":8,"module":9,"modid":10,"where":11,"body":12,"(":13,"exports":14,")":15,"topdecls":16,"topdecls_nonempty":17,";":18,"topdecl":19,"decl":20,"impdecl":21,"decls":22,"list_decl_comma_1":23,"decl_fixity":24,"var":25,"rhs":26,"apats":27,"pat":28,"varop":29,"=":30,"infixl":31,"literal":32,"op_list_1_comma":33,"infixr":34,"infix":35,"exports_inner":36,",":37,"export":38,"qvar":39,"qtycon":40,"..":41,"list_cname_0_comma":42,"import":43,"imports":44,"hiding":45,"list_import_1_comma":46,"import_a":47,"tycon":48,"exps":49,"lexp":50,"+":51,"-":52,"*":53,"/":54,"^":55,"%":56,"==":57,"/=":58,">":59,"<":60,">=":61,"<=":62,"if":63,"then":64,"else":65,"fexp":66,"\\":67,"->":68,"case":69,"of":70,"alts":71,"let":72,"in":73,"qop":74,"aexp":75,"vars":76,"alt":77,"list_cname_1_comma":78,"cname":79,"con":80,"gcon":81,"tuple":82,"listexp":83,"list_exp_1_comma":84,"[":85,"]":86,"qconid":87,"conid":88,"qvarop":89,"qconop":90,"op":91,"conop":92,"consym":93,"`":94,"qvarsym":95,"qvarid":96,"gconsym":97,"varsym":98,"varid":99,"tyvars":100,"tyvar":101,"qcon":102,"list_1_comma":103,":":104,"qconsym":105,"lpat":106,"apat":107,"_":108,"tuple_pat":109,"pat_list_1_comma":110,"integer":111,"string":112,"char":113,"float":114,"True":115,"False":116,"$accept":0,"$end":1},
terminals_: {2:"error",4:"{",6:"}",7:"EOF",9:"module",11:"where",13:"(",15:")",18:";",30:"=",31:"infixl",34:"infixr",35:"infix",37:",",40:"qtycon",41:"..",43:"import",45:"hiding",48:"tycon",51:"+",52:"-",53:"*",54:"/",55:"^",56:"%",57:"==",58:"/=",59:">",60:"<",61:">=",62:"<=",63:"if",64:"then",65:"else",67:"\\",68:"->",69:"case",70:"of",72:"let",73:"in",85:"[",86:"]",87:"qconid",88:"conid",93:"consym",94:"`",95:"qvarsym",96:"qvarid",98:"varsym",99:"varid",101:"tyvar",104:":",105:"qconsym",108:"_",111:"integer",112:"string",113:"char",114:"float",115:"True",116:"False"},
productions_: [0,[3,4],[8,4],[8,7],[8,1],[12,3],[12,0],[16,1],[17,3],[17,1],[19,1],[19,1],[22,2],[22,3],[22,3],[22,4],[23,3],[23,1],[20,1],[20,2],[20,3],[20,4],[20,7],[26,2],[26,4],[24,3],[24,3],[24,3],[14,1],[14,2],[36,3],[36,1],[38,1],[38,2],[38,1],[38,4],[38,4],[21,2],[21,5],[21,6],[44,1],[44,2],[44,1],[44,0],[46,3],[46,1],[47,1],[47,1],[47,4],[47,4],[49,3],[49,1],[5,1],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[50,6],[50,1],[50,4],[50,6],[50,4],[50,2],[50,3],[66,1],[66,2],[76,3],[76,1],[71,3],[71,1],[77,3],[42,1],[42,0],[78,3],[78,1],[79,1],[75,1],[75,1],[75,1],[75,3],[75,4],[75,1],[75,1],[82,5],[83,3],[84,3],[84,1],[10,1],[10,1],[74,1],[74,1],[33,3],[33,1],[91,1],[91,1],[92,1],[92,3],[89,1],[89,1],[89,3],[90,1],[90,3],[29,1],[29,3],[100,2],[100,1],[80,1],[80,3],[102,1],[102,3],[102,1],[81,2],[81,2],[81,3],[81,1],[103,1],[103,2],[25,1],[25,3],[39,1],[39,3],[39,1],[97,1],[97,1],[28,1],[106,1],[106,2],[27,1],[27,2],[107,1],[107,1],[107,1],[107,1],[107,1],[107,3],[109,5],[110,3],[110,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-2]; 
break;
case 2:this.$ = {astType: "module", modid: $$[$0-2], body: $$[$0], pos: this._$}; 
break;
case 3:this.$ = {astType: "module", modid: $$[$0-5], exports: $$[$0-3], body: $$[$0], pos: this._$}; 
break;
case 4:this.$ = {astType: "module", modid: new Lich.ModName("Main"), body: $$[$0], pos:this._$}; 
break;
case 5: 
        var imps = [], decs = [], atdecs = false;
        for (var i = 0; i < $$[$0-1].length; i++) {
            if ($$[$0-1][i].name == "impdecl" && !atdecs) {
                imps.push($$[$0-1][i]);
            } else if ($$[$0-1][i].name == "impdecl" && atdecs) {
                throw new Error("Parse error: import declaration in statement block at line " + $$[$0-1][i].pos.first_line);
            } else {
                atdecs = true;
                decs.push($$[$0-1][i]);
            }
        }
        
        // add Prelude as an import if not explicitly imported
        var prelude_imported = false;
        for(i=0 ; i<imps.length ; i++){
      if( imps[i].modid == "Prelude" ){
          prelude_imported = true;
          break;
            }
        }
        if( ! prelude_imported ){
            imps.push({astType: "impdecl", modid: new Lich.ModName("Prelude")});
        }

        this.$ = {astType: "body", impdecls: imps, topdecls: decs, pos:this._$}; 
break;
case 6:this.$ = {astType: "body", impdecls: [], topdecls: [], pos:this._$}; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 9: this.$ = [$$[$0]]; 
break;
case 10:this.$ = {astType: "topdecl-decl", decl: $$[$0], pos: this._$};
break;
case 11:this.$ = $$[$0];
break;
case 12: this.$ = []; 
break;
case 13: this.$ = $$[$0-1]; 
break;
case 14: this.$ = []; 
break;
case 15: this.$ = $$[$0-2]; 
break;
case 16: ($$[$0-2]).push($$[$0]); this.$ = $$[$0-2]; 
break;
case 17: this.$ = [$$[$0]]; 
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = {astType:"decl-fun", ident: $$[$0-1], args: [], rhs: $$[$0], pos: this._$};
break;
case 20:this.$ = {astType:"decl-fun", ident: $$[$0-2], args: $$[$0-1], rhs: $$[$0], pos: this._$};
break;
case 21:this.$ = {astType:"decl-fun", ident: $$[$0-2], args: [$$[$0-3],$$[$0-1]], rhs: $$[$0], pos: this._$, orig: "infix"};
break;
case 22:this.$ = {astType:"decl-fun", ident: $$[$0-4], args: [$$[$0-5],$$[$0-3]].concat($$[$0-1]), rhs: $$[$0], pos: this._$, orig: "infix"};
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = {astType: "fun-where", exp: $$[$0-2], decls: $$[$0], pos: this._$}; 
break;
case 25: this.$ = {astType: "fixity", fix: "leftfix", num: $$[$0-1], ops: $$[$0], pos: this._$}; 
break;
case 26: this.$ = {astType: "fixity", fix: "rightfix", num: $$[$0-1], ops: $$[$0], pos: this._$}; 
break;
case 27: this.$ = {astType: "fixity",  fix: "nonfix",num: $$[$0-1], ops: $$[$0], pos: this._$}; 
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0-1];
break;
case 30:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 31:this.$ = [$$[$0]];
break;
case 32:this.$ = {astType: "export-qvar", exp: $$[$0], pos: this._$};
break;
case 33:this.$ = {astType: "export-module", exp: $$[$0], pos: this._$};
break;
case 34:this.$ = {astType: "export-type-unspec", exp: $$[$0], pos: this._$};
break;
case 35:this.$ = {astType: "export-type-all", exp: $$[$0-3], pos: this._$};
break;
case 36:this.$ = {astType: "export-type-vars", exp: $$[$0-3], vars: $$[$0-1], pos: this._$};
break;
case 37:this.$ = {astType: "impdecl", modid: $$[$0], pos: this._$};
break;
case 38:this.$ = {astType: "impdecl", modid: $$[$0-3], hiding: false, imports: $$[$0-1], pos: this._$};
break;
case 39:this.$ = {astType: "impdecl", modid: $$[$0-4], hiding: true, imports: $$[$0-1], pos: this._$};
break;
case 40:this.$ = $$[$0];
break;
case 41:this.$ = $$[$0-1];
break;
case 42:this.$ = [];
break;
case 43:this.$ = [];
break;
case 44:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 45:this.$ = [$$[$0]];
break;
case 46:this.$ = {astType: "import-var", varastType: $$[$0], pos: this._$};
break;
case 47:this.$ = {astType: "import-tycon", tycon: $$[$0], all: false, pos: this._$};
break;
case 48:this.$ = {astType: "import-tycon", tycon: $$[$0-3], all: true, pos: this._$};
break;
case 49:this.$ = {astType: "import-tycon", tycon: $$[$0-3], all: false, list:$$[$0-1], pos: this._$};
break;
case 50: ($$[$0-2]).push($$[$0]); this.$ = $$[$0-2]; 
break;
case 51: this.$ = [$$[$0]]; 
break;
case 52:this.$ = $$[$0]
break;
case 53:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 54:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 55:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 56:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 57:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 58:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 59:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 60:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 61:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 62:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 63:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 64:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 65:this.$ = {astType:"ite",e1:$$[$0-4],e2:$$[$0-2],e3:$$[$0],pos:this._$}; 
break;
case 66: this.$ = ($$[$0].length === 1) ? ($$[$0][0]) : {astType:"application", exps:$$[$0],pos:this._$}; 
break;
case 67:this.$ = {astType:"lambda", args: $$[$0-2], rhs: $$[$0], pos: this._$}; 
break;
case 68:this.$ = {astType:"case", exp: $$[$0-4], alts: $$[$0-1], pos: this._$}; 
break;
case 69:this.$ = {astType:"let", decls: $$[$0-2], exp: $$[$0], pos: this._$}; 
break;
case 70:this.$ = {astType:"let-one", decl: $$[$0], pos: this._$}; 
break;
case 71:this.$ = {astType:"binop-exp",op:$$[$0-1],lhs:$$[$0-2],rhs:$$[$0],pos:this._$};
break;
case 72:this.$ = [$$[$0]];
break;
case 73:($$[$0-1]).push($$[$0]); this.$ = $$[$0-1];
break;
case 74:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 75:this.$ = [$$[$0]];
break;
case 76:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 77:this.$ = [$$[$0]];
break;
case 78:this.$ = {astType:"alt", pat: $$[$0-2], exp: $$[$0]};
break;
case 79:this.$ = $$[$0];
break;
case 80:this.$ = [];
break;
case 81:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 82:this.$ = [$$[$0]];
break;
case 83:this.$ = $$[$0];
break;
case 84:this.$ = $$[$0];
break;
case 85:this.$ = $$[$0];
break;
case 86:this.$ = $$[$0];
break;
case 87:this.$ = $$[$0-1];
break;
case 88:this.$ = {astType:"negate",rhs:$$[$0-1]};
break;
case 89:this.$ = $$[$0];
break;
case 90:this.$ = $$[$0];
break;
case 91:$$[$0-1].unshift($$[$0-3]); this.$ = {astType: "tuple", members: $$[$0-1], pos: this._$}; 
break;
case 92: this.$ = {astType: "listexp", members: $$[$0-1], pos: this._$}; 
break;
case 93:$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 94:this.$ = [$$[$0]];
break;
case 95:this.$ = new Lich.ModName($$[$0], this._$, yy.lexer.previous.qual);
break;
case 96:this.$ = new Lich.ModName($$[$0], this._$);
break;
case 97:this.$ = {astType: "qop", id: $$[$0], pos: this._$};
break;
case 98:this.$ = {astType: "qop", id: $$[$0], pos: this._$};
break;
case 99: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 100: this.$ = [$$[$0]]; 
break;
case 101: this.$ = $$[$0]; 
break;
case 102: this.$ = $$[$0]; 
break;
case 103: this.$ = new Lich.DaCon($$[$0], this._$, true); 
break;
case 104: this.$ = new Lich.DaCon($$[$0-1], this._$, false); 
break;
case 105:this.$ = new Lich.VarName($$[$0], this._$, true, yy.lexer.previous.qual);
break;
case 106:this.$ = $$[$0];
break;
case 107:this.$ = new Lich.VarName($$[$0-1], this._$, false, yy.lexer.previous.qual);
break;
case 108:this.$ = $$[$0];
break;
case 109:this.$ = new Lich.DaCon($$[$0-1], this._$, false, yy.lexer.previous.qual);
break;
case 110:this.$ = new Lich.VarName($$[$0], this._$, true);
break;
case 111:this.$ = new Lich.VarName($$[$0-1], this._$, false)
break;
case 112:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 113:this.$ = [$$[$0]];
break;
case 114:this.$ = new Lich.DaCon($$[$0], this._$, false);
break;
case 115:this.$ = new Lich.DaCon($$[$0-1], this._$, true);
break;
case 116:this.$ = new Lich.DaCon($$[$0], this._$, false, yy.lexer.previous.qual);
break;
case 117:this.$ = $$[$0-1];
break;
case 118:this.$ = $$[$0];
break;
case 119:this.$ = new Lich.UnitDaCon(this._$);
break;
case 120:this.$ = new Lich.NilDaCon(this._$);
break;
case 121:this.$ = new Lich.TupleDaCon($$[$0-1] + 1, this._$);
break;
case 122:this.$ = $$[$0];
break;
case 123:this.$ = 1;
break;
case 124:this.$ = $$[$0-1] + 1;
break;
case 125:this.$ = new Lich.VarName($$[$0], this._$, false);
break;
case 126:this.$ = new Lich.VarName($$[$0-1], this._$, true);
break;
case 127:this.$ = new Lich.VarName($$[$0], this._$, false, yy.lexer.previous.qual);
break;
case 128:this.$ = new Lich.VarName($$[$0-1], this._$, true, yy.lexer.previous.qual);
break;
case 129:this.$ = $$[$0];
break;
case 130:this.$ = new Lich.ConsDaCon(this._$);
break;
case 131:this.$ = new Lich.DaCon($$[$0], this._$, true, yy.lexer.previous.qual);
break;
case 132:this.$ = $$[$0];
break;
case 133:this.$ = $$[$0];
break;
case 134:this.$ = {astType: "conpat", con: $$[$0-1], pats: $$[$0]}; 
break;
case 135:this.$ = [$$[$0]];
break;
case 136:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 137:this.$ = $$[$0]; 
break;
case 138:this.$ = $$[$0]; 
break;
case 139:this.$ = $$[$0]; 
break;
case 140:this.$ = {astType:"wildcard", pos: this._$}; 
break;
case 141:this.$ = $$[$0]; 
break;
case 142:this.$ = $$[$0-1]; 
break;
case 143:$$[$0-1].unshift($$[$0-3]); this.$ = {astType: "tuple_pat", members: $$[$0-1], pos: this._$}; 
break;
case 144:$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 145:this.$ = [$$[$0]]; 
break;
case 146:this.$ = {astType: "integer-lit", value: Number($$[$0]), pos: this._$};
break;
case 147:this.$ = {astType: "string-lit", value: $$[$0], pos: this._$};
break;
case 148:this.$ = {astType: "char-lit", value: $$[$0], pos: this._$};
break;
case 149:this.$ = {astType: "float-lit", value: Number($$[$0]), pos: this._$};
break;
case 150:this.$ = {astType: "boolean-lit", value: true, pos: this._$};
break;
case 151:this.$ = {astType: "boolean-lit", value: false, pos: this._$};
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{6:[1,31],29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,52],6:[2,52],11:[2,52],15:[2,52],18:[2,52],37:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],64:[2,52],65:[2,52],70:[2,52],86:[2,52],94:[2,52],95:[2,52],98:[2,52],104:[2,52],105:[2,52]},{5:54,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,66],6:[2,66],11:[2,66],13:[1,14],15:[2,66],18:[2,66],25:18,32:13,37:[2,66],39:11,51:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],64:[2,66],65:[2,66],70:[2,66],75:55,80:29,81:12,82:15,83:16,85:[1,19],86:[2,66],87:[1,28],88:[1,30],94:[2,66],95:[2,66],96:[1,17],98:[2,66],99:[1,27],102:20,104:[2,66],105:[2,66],111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[1,63],25:58,27:56,32:60,80:29,81:59,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,107:57,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:65,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{4:[1,68],13:[1,72],20:67,22:66,24:69,25:70,28:71,31:[1,73],32:60,34:[1,74],35:[1,75],80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,72],6:[2,72],11:[2,72],13:[2,72],15:[2,72],18:[2,72],37:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],64:[2,72],65:[2,72],70:[2,72],85:[2,72],86:[2,72],87:[2,72],88:[2,72],94:[2,72],95:[2,72],96:[2,72],98:[2,72],99:[2,72],104:[2,72],105:[2,72],111:[2,72],112:[2,72],113:[2,72],114:[2,72],115:[2,72],116:[2,72]},{2:[2,84],6:[2,84],11:[2,84],13:[2,84],15:[2,84],18:[2,84],37:[2,84],51:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[2,84],57:[2,84],58:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],64:[2,84],65:[2,84],70:[2,84],85:[2,84],86:[2,84],87:[2,84],88:[2,84],94:[2,84],95:[2,84],96:[2,84],98:[2,84],99:[2,84],104:[2,84],105:[2,84],111:[2,84],112:[2,84],113:[2,84],114:[2,84],115:[2,84],116:[2,84]},{2:[2,85],6:[2,85],11:[2,85],13:[2,85],15:[2,85],18:[2,85],37:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[2,85],58:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],64:[2,85],65:[2,85],70:[2,85],85:[2,85],86:[2,85],87:[2,85],88:[2,85],94:[2,85],95:[2,85],96:[2,85],98:[2,85],99:[2,85],104:[2,85],105:[2,85],111:[2,85],112:[2,85],113:[2,85],114:[2,85],115:[2,85],116:[2,85]},{2:[2,86],6:[2,86],11:[2,86],13:[2,86],15:[2,86],18:[2,86],37:[2,86],51:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86],58:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],64:[2,86],65:[2,86],70:[2,86],85:[2,86],86:[2,86],87:[2,86],88:[2,86],94:[2,86],95:[2,86],96:[2,86],98:[2,86],99:[2,86],104:[2,86],105:[2,86],111:[2,86],112:[2,86],113:[2,86],114:[2,86],115:[2,86],116:[2,86]},{5:79,13:[1,14],15:[1,82],25:18,32:13,37:[1,87],39:11,50:4,52:[1,80],63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],93:[1,86],95:[1,81],96:[1,17],97:85,98:[1,84],99:[1,27],102:20,103:83,104:[1,52],105:[1,53],111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,89],6:[2,89],11:[2,89],13:[2,89],15:[2,89],18:[2,89],37:[2,89],51:[2,89],52:[2,89],53:[2,89],54:[2,89],55:[2,89],56:[2,89],57:[2,89],58:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],64:[2,89],65:[2,89],70:[2,89],85:[2,89],86:[2,89],87:[2,89],88:[2,89],94:[2,89],95:[2,89],96:[2,89],98:[2,89],99:[2,89],104:[2,89],105:[2,89],111:[2,89],112:[2,89],113:[2,89],114:[2,89],115:[2,89],116:[2,89]},{2:[2,90],6:[2,90],11:[2,90],13:[2,90],15:[2,90],18:[2,90],37:[2,90],51:[2,90],52:[2,90],53:[2,90],54:[2,90],55:[2,90],56:[2,90],57:[2,90],58:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],64:[2,90],65:[2,90],70:[2,90],85:[2,90],86:[2,90],87:[2,90],88:[2,90],94:[2,90],95:[2,90],96:[2,90],98:[2,90],99:[2,90],104:[2,90],105:[2,90],111:[2,90],112:[2,90],113:[2,90],114:[2,90],115:[2,90],116:[2,90]},{2:[2,127],6:[2,127],11:[2,127],13:[2,127],15:[2,127],18:[2,127],37:[2,127],51:[2,127],52:[2,127],53:[2,127],54:[2,127],55:[2,127],56:[2,127],57:[2,127],58:[2,127],59:[2,127],60:[2,127],61:[2,127],62:[2,127],64:[2,127],65:[2,127],70:[2,127],85:[2,127],86:[2,127],87:[2,127],88:[2,127],94:[2,127],95:[2,127],96:[2,127],98:[2,127],99:[2,127],104:[2,127],105:[2,127],111:[2,127],112:[2,127],113:[2,127],114:[2,127],115:[2,127],116:[2,127]},{2:[2,129],6:[2,129],11:[2,129],13:[2,129],15:[2,129],18:[2,129],37:[2,129],51:[2,129],52:[2,129],53:[2,129],54:[2,129],55:[2,129],56:[2,129],57:[2,129],58:[2,129],59:[2,129],60:[2,129],61:[2,129],62:[2,129],64:[2,129],65:[2,129],70:[2,129],85:[2,129],86:[2,129],87:[2,129],88:[2,129],94:[2,129],95:[2,129],96:[2,129],98:[2,129],99:[2,129],104:[2,129],105:[2,129],111:[2,129],112:[2,129],113:[2,129],114:[2,129],115:[2,129],116:[2,129]},{5:90,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,84:89,85:[1,19],86:[1,88],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,122],6:[2,122],11:[2,122],13:[2,122],15:[2,122],18:[2,122],30:[2,122],37:[2,122],51:[2,122],52:[2,122],53:[2,122],54:[2,122],55:[2,122],56:[2,122],57:[2,122],58:[2,122],59:[2,122],60:[2,122],61:[2,122],62:[2,122],64:[2,122],65:[2,122],68:[2,122],70:[2,122],85:[2,122],86:[2,122],87:[2,122],88:[2,122],94:[2,122],95:[2,122],96:[2,122],98:[2,122],99:[2,122],104:[2,122],105:[2,122],108:[2,122],111:[2,122],112:[2,122],113:[2,122],114:[2,122],115:[2,122],116:[2,122]},{2:[2,146],6:[2,146],11:[2,146],13:[2,146],15:[2,146],18:[2,146],30:[2,146],37:[2,146],51:[2,146],52:[2,146],53:[2,146],54:[2,146],55:[2,146],56:[2,146],57:[2,146],58:[2,146],59:[2,146],60:[2,146],61:[2,146],62:[2,146],64:[2,146],65:[2,146],68:[2,146],70:[2,146],85:[2,146],86:[2,146],87:[2,146],88:[2,146],93:[2,146],94:[2,146],95:[2,146],96:[2,146],98:[2,146],99:[2,146],104:[2,146],105:[2,146],108:[2,146],111:[2,146],112:[2,146],113:[2,146],114:[2,146],115:[2,146],116:[2,146]},{2:[2,147],6:[2,147],11:[2,147],13:[2,147],15:[2,147],18:[2,147],30:[2,147],37:[2,147],51:[2,147],52:[2,147],53:[2,147],54:[2,147],55:[2,147],56:[2,147],57:[2,147],58:[2,147],59:[2,147],60:[2,147],61:[2,147],62:[2,147],64:[2,147],65:[2,147],68:[2,147],70:[2,147],85:[2,147],86:[2,147],87:[2,147],88:[2,147],93:[2,147],94:[2,147],95:[2,147],96:[2,147],98:[2,147],99:[2,147],104:[2,147],105:[2,147],108:[2,147],111:[2,147],112:[2,147],113:[2,147],114:[2,147],115:[2,147],116:[2,147]},{2:[2,148],6:[2,148],11:[2,148],13:[2,148],15:[2,148],18:[2,148],30:[2,148],37:[2,148],51:[2,148],52:[2,148],53:[2,148],54:[2,148],55:[2,148],56:[2,148],57:[2,148],58:[2,148],59:[2,148],60:[2,148],61:[2,148],62:[2,148],64:[2,148],65:[2,148],68:[2,148],70:[2,148],85:[2,148],86:[2,148],87:[2,148],88:[2,148],93:[2,148],94:[2,148],95:[2,148],96:[2,148],98:[2,148],99:[2,148],104:[2,148],105:[2,148],108:[2,148],111:[2,148],112:[2,148],113:[2,148],114:[2,148],115:[2,148],116:[2,148]},{2:[2,149],6:[2,149],11:[2,149],13:[2,149],15:[2,149],18:[2,149],30:[2,149],37:[2,149],51:[2,149],52:[2,149],53:[2,149],54:[2,149],55:[2,149],56:[2,149],57:[2,149],58:[2,149],59:[2,149],60:[2,149],61:[2,149],62:[2,149],64:[2,149],65:[2,149],68:[2,149],70:[2,149],85:[2,149],86:[2,149],87:[2,149],88:[2,149],93:[2,149],94:[2,149],95:[2,149],96:[2,149],98:[2,149],99:[2,149],104:[2,149],105:[2,149],108:[2,149],111:[2,149],112:[2,149],113:[2,149],114:[2,149],115:[2,149],116:[2,149]},{2:[2,150],6:[2,150],11:[2,150],13:[2,150],15:[2,150],18:[2,150],30:[2,150],37:[2,150],51:[2,150],52:[2,150],53:[2,150],54:[2,150],55:[2,150],56:[2,150],57:[2,150],58:[2,150],59:[2,150],60:[2,150],61:[2,150],62:[2,150],64:[2,150],65:[2,150],68:[2,150],70:[2,150],85:[2,150],86:[2,150],87:[2,150],88:[2,150],93:[2,150],94:[2,150],95:[2,150],96:[2,150],98:[2,150],99:[2,150],104:[2,150],105:[2,150],108:[2,150],111:[2,150],112:[2,150],113:[2,150],114:[2,150],115:[2,150],116:[2,150]},{2:[2,151],6:[2,151],11:[2,151],13:[2,151],15:[2,151],18:[2,151],30:[2,151],37:[2,151],51:[2,151],52:[2,151],53:[2,151],54:[2,151],55:[2,151],56:[2,151],57:[2,151],58:[2,151],59:[2,151],60:[2,151],61:[2,151],62:[2,151],64:[2,151],65:[2,151],68:[2,151],70:[2,151],85:[2,151],86:[2,151],87:[2,151],88:[2,151],93:[2,151],94:[2,151],95:[2,151],96:[2,151],98:[2,151],99:[2,151],104:[2,151],105:[2,151],108:[2,151],111:[2,151],112:[2,151],113:[2,151],114:[2,151],115:[2,151],116:[2,151]},{2:[2,125],6:[2,125],11:[2,125],13:[2,125],15:[2,125],18:[2,125],30:[2,125],37:[2,125],51:[2,125],52:[2,125],53:[2,125],54:[2,125],55:[2,125],56:[2,125],57:[2,125],58:[2,125],59:[2,125],60:[2,125],61:[2,125],62:[2,125],64:[2,125],65:[2,125],68:[2,125],70:[2,125],85:[2,125],86:[2,125],87:[2,125],88:[2,125],94:[2,125],95:[2,125],96:[2,125],98:[2,125],99:[2,125],104:[2,125],105:[2,125],108:[2,125],111:[2,125],112:[2,125],113:[2,125],114:[2,125],115:[2,125],116:[2,125]},{2:[2,116],6:[2,116],11:[2,116],13:[2,116],15:[2,116],18:[2,116],30:[2,116],37:[2,116],51:[2,116],52:[2,116],53:[2,116],54:[2,116],55:[2,116],56:[2,116],57:[2,116],58:[2,116],59:[2,116],60:[2,116],61:[2,116],62:[2,116],64:[2,116],65:[2,116],68:[2,116],70:[2,116],85:[2,116],86:[2,116],87:[2,116],88:[2,116],94:[2,116],95:[2,116],96:[2,116],98:[2,116],99:[2,116],104:[2,116],105:[2,116],108:[2,116],111:[2,116],112:[2,116],113:[2,116],114:[2,116],115:[2,116],116:[2,116]},{2:[2,118],6:[2,118],11:[2,118],13:[2,118],15:[2,118],18:[2,118],30:[2,118],37:[2,118],51:[2,118],52:[2,118],53:[2,118],54:[2,118],55:[2,118],56:[2,118],57:[2,118],58:[2,118],59:[2,118],60:[2,118],61:[2,118],62:[2,118],64:[2,118],65:[2,118],68:[2,118],70:[2,118],85:[2,118],86:[2,118],87:[2,118],88:[2,118],94:[2,118],95:[2,118],96:[2,118],98:[2,118],99:[2,118],104:[2,118],105:[2,118],108:[2,118],111:[2,118],112:[2,118],113:[2,118],114:[2,118],115:[2,118],116:[2,118]},{2:[2,114],6:[2,114],11:[2,114],13:[2,114],15:[2,114],18:[2,114],30:[2,114],37:[2,114],51:[2,114],52:[2,114],53:[2,114],54:[2,114],55:[2,114],56:[2,114],57:[2,114],58:[2,114],59:[2,114],60:[2,114],61:[2,114],62:[2,114],64:[2,114],65:[2,114],68:[2,114],70:[2,114],85:[2,114],86:[2,114],87:[2,114],88:[2,114],94:[2,114],95:[2,114],96:[2,114],98:[2,114],99:[2,114],104:[2,114],105:[2,114],108:[2,114],111:[2,114],112:[2,114],113:[2,114],114:[2,114],115:[2,114],116:[2,114]},{7:[1,91]},{5:92,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:93,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:94,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:95,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:96,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:97,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:98,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:99,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:100,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:101,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:102,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:103,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:105,13:[1,14],25:18,32:13,39:11,50:104,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[2,97],63:[2,97],67:[2,97],69:[2,97],72:[2,97],85:[2,97],87:[2,97],88:[2,97],96:[2,97],99:[2,97],111:[2,97],112:[2,97],113:[2,97],114:[2,97],115:[2,97],116:[2,97]},{13:[2,98],63:[2,98],67:[2,98],69:[2,98],72:[2,98],85:[2,98],87:[2,98],88:[2,98],96:[2,98],99:[2,98],111:[2,98],112:[2,98],113:[2,98],114:[2,98],115:[2,98],116:[2,98]},{13:[2,105],63:[2,105],67:[2,105],69:[2,105],72:[2,105],85:[2,105],87:[2,105],88:[2,105],96:[2,105],99:[2,105],111:[2,105],112:[2,105],113:[2,105],114:[2,105],115:[2,105],116:[2,105]},{13:[2,106],63:[2,106],67:[2,106],69:[2,106],72:[2,106],85:[2,106],87:[2,106],88:[2,106],96:[2,106],99:[2,106],111:[2,106],112:[2,106],113:[2,106],114:[2,106],115:[2,106],116:[2,106]},{87:[1,107],96:[1,106],99:[1,108]},{13:[2,108],63:[2,108],67:[2,108],69:[2,108],72:[2,108],85:[2,108],87:[2,108],88:[2,108],96:[2,108],99:[2,108],111:[2,108],112:[2,108],113:[2,108],114:[2,108],115:[2,108],116:[2,108]},{2:[2,110],6:[2,110],11:[2,110],13:[2,110],15:[2,110],18:[2,110],37:[2,110],51:[2,110],52:[2,110],53:[2,110],54:[2,110],55:[2,110],56:[2,110],57:[2,110],58:[2,110],59:[2,110],60:[2,110],61:[2,110],62:[2,110],63:[2,110],64:[2,110],65:[2,110],67:[2,110],69:[2,110],70:[2,110],72:[2,110],85:[2,110],86:[2,110],87:[2,110],88:[2,110],94:[2,110],95:[2,110],96:[2,110],98:[2,110],99:[2,110],104:[2,110],105:[2,110],108:[2,110],111:[2,110],112:[2,110],113:[2,110],114:[2,110],115:[2,110],116:[2,110]},{13:[2,130],15:[2,130],63:[2,130],67:[2,130],69:[2,130],72:[2,130],85:[2,130],87:[2,130],88:[2,130],96:[2,130],99:[2,130],111:[2,130],112:[2,130],113:[2,130],114:[2,130],115:[2,130],116:[2,130]},{13:[2,131],15:[2,131],63:[2,131],67:[2,131],69:[2,131],72:[2,131],85:[2,131],87:[2,131],88:[2,131],96:[2,131],99:[2,131],111:[2,131],112:[2,131],113:[2,131],114:[2,131],115:[2,131],116:[2,131]},{29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[1,109],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,73],6:[2,73],11:[2,73],13:[2,73],15:[2,73],18:[2,73],37:[2,73],51:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],64:[2,73],65:[2,73],70:[2,73],85:[2,73],86:[2,73],87:[2,73],88:[2,73],94:[2,73],95:[2,73],96:[2,73],98:[2,73],99:[2,73],104:[2,73],105:[2,73],111:[2,73],112:[2,73],113:[2,73],114:[2,73],115:[2,73],116:[2,73]},{13:[1,63],25:58,32:60,68:[1,110],80:29,81:59,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,107:111,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[2,135],15:[2,135],30:[2,135],37:[2,135],68:[2,135],85:[2,135],87:[2,135],88:[2,135],94:[2,135],98:[2,135],99:[2,135],108:[2,135],111:[2,135],112:[2,135],113:[2,135],114:[2,135],115:[2,135],116:[2,135]},{13:[2,137],15:[2,137],30:[2,137],37:[2,137],68:[2,137],85:[2,137],87:[2,137],88:[2,137],94:[2,137],98:[2,137],99:[2,137],108:[2,137],111:[2,137],112:[2,137],113:[2,137],114:[2,137],115:[2,137],116:[2,137]},{13:[2,138],15:[2,138],30:[2,138],37:[2,138],68:[2,138],85:[2,138],87:[2,138],88:[2,138],94:[2,138],98:[2,138],99:[2,138],108:[2,138],111:[2,138],112:[2,138],113:[2,138],114:[2,138],115:[2,138],116:[2,138]},{13:[2,139],15:[2,139],30:[2,139],37:[2,139],68:[2,139],85:[2,139],87:[2,139],88:[2,139],94:[2,139],98:[2,139],99:[2,139],108:[2,139],111:[2,139],112:[2,139],113:[2,139],114:[2,139],115:[2,139],116:[2,139]},{13:[2,140],15:[2,140],30:[2,140],37:[2,140],68:[2,140],85:[2,140],87:[2,140],88:[2,140],94:[2,140],98:[2,140],99:[2,140],108:[2,140],111:[2,140],112:[2,140],113:[2,140],114:[2,140],115:[2,140],116:[2,140]},{13:[2,141],15:[2,141],30:[2,141],37:[2,141],68:[2,141],85:[2,141],87:[2,141],88:[2,141],94:[2,141],98:[2,141],99:[2,141],108:[2,141],111:[2,141],112:[2,141],113:[2,141],114:[2,141],115:[2,141],116:[2,141]},{13:[1,63],15:[1,82],25:58,28:112,32:60,37:[1,87],80:29,81:78,85:[1,64],87:[1,28],88:[1,30],93:[1,86],97:85,98:[1,84],99:[1,27],102:20,103:83,104:[1,52],105:[1,53],106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{86:[1,88]},{29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],70:[1,113],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{73:[1,114]},{2:[2,70],6:[2,70],11:[2,70],15:[2,70],18:[2,70],37:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],64:[2,70],65:[2,70],70:[2,70],86:[2,70],94:[2,70],95:[2,70],98:[2,70],104:[2,70],105:[2,70]},{2:[1,117],6:[1,115],13:[1,72],20:118,23:116,24:69,25:70,28:71,31:[1,73],32:60,34:[1,74],35:[1,75],80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,18],6:[2,18],11:[2,18],15:[2,18],18:[2,18],37:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],64:[2,18],65:[2,18],70:[2,18],86:[2,18],94:[2,18],95:[2,18],98:[2,18],104:[2,18],105:[2,18]},{13:[1,63],25:58,26:119,27:120,30:[1,121],32:60,80:29,81:59,85:[1,64],87:[1,28],88:[1,30],94:[2,137],98:[2,137],99:[1,27],102:20,107:57,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{29:122,94:[1,123],98:[1,51]},{13:[1,63],15:[1,82],25:58,28:124,32:60,37:[1,87],80:29,81:78,85:[1,64],87:[1,28],88:[1,30],93:[1,86],97:85,98:[1,84],99:[1,27],102:20,103:83,104:[1,52],105:[1,53],106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{32:125,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{32:126,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{32:127,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{15:[2,132],30:[2,132],37:[2,132],68:[2,132],94:[2,132],98:[2,132]},{15:[2,133],30:[2,133],37:[2,133],68:[2,133],94:[2,133],98:[2,133]},{13:[1,63],15:[2,138],25:58,27:128,30:[2,138],32:60,37:[2,138],68:[2,138],80:29,81:59,85:[1,64],87:[1,28],88:[1,30],94:[2,138],98:[2,138],99:[1,27],102:20,107:57,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{15:[1,129],29:48,37:[1,130],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{5:131,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{15:[1,132]},{2:[2,119],6:[2,119],11:[2,119],13:[2,119],15:[2,119],18:[2,119],30:[2,119],37:[2,119],51:[2,119],52:[2,119],53:[2,119],54:[2,119],55:[2,119],56:[2,119],57:[2,119],58:[2,119],59:[2,119],60:[2,119],61:[2,119],62:[2,119],64:[2,119],65:[2,119],68:[2,119],70:[2,119],85:[2,119],86:[2,119],87:[2,119],88:[2,119],94:[2,119],95:[2,119],96:[2,119],98:[2,119],99:[2,119],104:[2,119],105:[2,119],108:[2,119],111:[2,119],112:[2,119],113:[2,119],114:[2,119],115:[2,119],116:[2,119]},{15:[1,133],37:[1,134]},{15:[1,135]},{15:[1,136]},{15:[1,137]},{15:[2,123],37:[2,123]},{2:[2,120],6:[2,120],11:[2,120],13:[2,120],15:[2,120],18:[2,120],30:[2,120],37:[2,120],51:[2,120],52:[2,120],53:[2,120],54:[2,120],55:[2,120],56:[2,120],57:[2,120],58:[2,120],59:[2,120],60:[2,120],61:[2,120],62:[2,120],64:[2,120],65:[2,120],68:[2,120],70:[2,120],85:[2,120],86:[2,120],87:[2,120],88:[2,120],94:[2,120],95:[2,120],96:[2,120],98:[2,120],99:[2,120],104:[2,120],105:[2,120],108:[2,120],111:[2,120],112:[2,120],113:[2,120],114:[2,120],115:[2,120],116:[2,120]},{37:[1,139],86:[1,138]},{15:[2,94],29:48,37:[2,94],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,86:[2,94],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{1:[2,1]},{2:[2,53],6:[2,53],11:[2,53],15:[2,53],18:[2,53],29:48,37:[2,53],51:[2,53],52:[2,53],53:[1,34],54:[1,35],55:[1,36],56:[2,53],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,53],65:[2,53],70:[2,53],74:44,86:[2,53],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,54],6:[2,54],11:[2,54],15:[2,54],18:[2,54],29:48,37:[2,54],51:[2,54],52:[2,54],53:[1,34],54:[1,35],55:[1,36],56:[2,54],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,54],65:[2,54],70:[2,54],74:44,86:[2,54],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,55],6:[2,55],11:[2,55],15:[2,55],18:[2,55],29:48,37:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[1,36],56:[2,55],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,55],65:[2,55],70:[2,55],74:44,86:[2,55],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,56],6:[2,56],11:[2,56],15:[2,56],18:[2,56],29:48,37:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[1,36],56:[2,56],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,56],65:[2,56],70:[2,56],74:44,86:[2,56],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,57],6:[2,57],11:[2,57],15:[2,57],18:[2,57],29:48,37:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,57],65:[2,57],70:[2,57],74:44,86:[2,57],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,58],6:[2,58],11:[2,58],15:[2,58],18:[2,58],29:48,37:[2,58],51:[2,58],52:[2,58],53:[1,34],54:[1,35],55:[1,36],56:[2,58],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,58],65:[2,58],70:[2,58],74:44,86:[2,58],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,59],6:[2,59],11:[2,59],15:[2,59],18:[2,59],29:48,37:[2,59],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,59],65:[2,59],70:[2,59],74:44,86:[2,59],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,60],6:[2,60],11:[2,60],15:[2,60],18:[2,60],29:48,37:[2,60],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,60],65:[2,60],70:[2,60],74:44,86:[2,60],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,61],6:[2,61],11:[2,61],15:[2,61],18:[2,61],29:48,37:[2,61],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,61],65:[2,61],70:[2,61],74:44,86:[2,61],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,62],6:[2,62],11:[2,62],15:[2,62],18:[2,62],29:48,37:[2,62],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,62],65:[2,62],70:[2,62],74:44,86:[2,62],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,63],6:[2,63],11:[2,63],15:[2,63],18:[2,63],29:48,37:[2,63],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,63],65:[2,63],70:[2,63],74:44,86:[2,63],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,64],6:[2,64],11:[2,64],15:[2,64],18:[2,64],29:48,37:[2,64],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,64],65:[2,64],70:[2,64],74:44,86:[2,64],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,71],6:[2,71],11:[2,71],15:[2,71],18:[2,71],37:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],64:[2,71],65:[2,71],70:[2,71],86:[2,71],94:[2,71],95:[2,71],98:[2,71],104:[2,71],105:[2,71]},{29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{94:[1,140]},{94:[1,141]},{94:[1,142]},{5:143,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:144,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[2,136],15:[2,136],30:[2,136],37:[2,136],68:[2,136],85:[2,136],87:[2,136],88:[2,136],94:[2,136],98:[2,136],99:[2,136],108:[2,136],111:[2,136],112:[2,136],113:[2,136],114:[2,136],115:[2,136],116:[2,136]},{15:[1,145],37:[1,146]},{4:[1,147]},{5:148,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,12],6:[2,12],11:[2,12],15:[2,12],18:[2,12],37:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],64:[2,12],65:[2,12],70:[2,12],73:[2,12],86:[2,12],94:[2,12],95:[2,12],98:[2,12],104:[2,12],105:[2,12]},{2:[1,150],6:[1,149],18:[1,151]},{6:[1,152]},{2:[2,17],6:[2,17],18:[2,17]},{2:[2,19],6:[2,19],11:[2,19],15:[2,19],18:[2,19],37:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],64:[2,19],65:[2,19],70:[2,19],86:[2,19],94:[2,19],95:[2,19],98:[2,19],104:[2,19],105:[2,19]},{13:[1,63],25:58,26:153,30:[1,121],32:60,80:29,81:59,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,107:111,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:154,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[1,63],25:58,28:155,32:60,80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{99:[1,108]},{15:[1,145],29:156,37:[1,146],94:[1,123],98:[1,51]},{29:159,33:157,91:158,92:160,93:[1,162],94:[1,161],98:[1,51]},{29:159,33:163,91:158,92:160,93:[1,162],94:[1,161],98:[1,51]},{29:159,33:164,91:158,92:160,93:[1,162],94:[1,161],98:[1,51]},{13:[1,63],15:[2,134],25:58,30:[2,134],32:60,37:[2,134],68:[2,134],80:29,81:59,85:[1,64],87:[1,28],88:[1,30],94:[2,134],98:[2,134],99:[1,27],102:20,107:111,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,87],6:[2,87],11:[2,87],13:[2,87],15:[2,87],18:[2,87],37:[2,87],51:[2,87],52:[2,87],53:[2,87],54:[2,87],55:[2,87],56:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],64:[2,87],65:[2,87],70:[2,87],85:[2,87],86:[2,87],87:[2,87],88:[2,87],94:[2,87],95:[2,87],96:[2,87],98:[2,87],99:[2,87],104:[2,87],105:[2,87],111:[2,87],112:[2,87],113:[2,87],114:[2,87],115:[2,87],116:[2,87]},{5:90,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,84:165,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{15:[1,166],29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,128],6:[2,128],11:[2,128],13:[2,128],15:[2,128],18:[2,128],37:[2,128],51:[2,128],52:[2,128],53:[2,128],54:[2,128],55:[2,128],56:[2,128],57:[2,128],58:[2,128],59:[2,128],60:[2,128],61:[2,128],62:[2,128],64:[2,128],65:[2,128],70:[2,128],85:[2,128],86:[2,128],87:[2,128],88:[2,128],94:[2,128],95:[2,128],96:[2,128],98:[2,128],99:[2,128],104:[2,128],105:[2,128],111:[2,128],112:[2,128],113:[2,128],114:[2,128],115:[2,128],116:[2,128]},{2:[2,121],6:[2,121],11:[2,121],13:[2,121],15:[2,121],18:[2,121],30:[2,121],37:[2,121],51:[2,121],52:[2,121],53:[2,121],54:[2,121],55:[2,121],56:[2,121],57:[2,121],58:[2,121],59:[2,121],60:[2,121],61:[2,121],62:[2,121],64:[2,121],65:[2,121],68:[2,121],70:[2,121],85:[2,121],86:[2,121],87:[2,121],88:[2,121],94:[2,121],95:[2,121],96:[2,121],98:[2,121],99:[2,121],104:[2,121],105:[2,121],108:[2,121],111:[2,121],112:[2,121],113:[2,121],114:[2,121],115:[2,121],116:[2,121]},{15:[2,124],37:[2,124]},{2:[2,126],6:[2,126],11:[2,126],13:[2,126],15:[2,126],18:[2,126],30:[2,126],37:[2,126],51:[2,126],52:[2,126],53:[2,126],54:[2,126],55:[2,126],56:[2,126],57:[2,126],58:[2,126],59:[2,126],60:[2,126],61:[2,126],62:[2,126],64:[2,126],65:[2,126],68:[2,126],70:[2,126],85:[2,126],86:[2,126],87:[2,126],88:[2,126],94:[2,126],95:[2,126],96:[2,126],98:[2,126],99:[2,126],104:[2,126],105:[2,126],108:[2,126],111:[2,126],112:[2,126],113:[2,126],114:[2,126],115:[2,126],116:[2,126]},{2:[2,117],6:[2,117],11:[2,117],13:[2,117],15:[2,117],18:[2,117],30:[2,117],37:[2,117],51:[2,117],52:[2,117],53:[2,117],54:[2,117],55:[2,117],56:[2,117],57:[2,117],58:[2,117],59:[2,117],60:[2,117],61:[2,117],62:[2,117],64:[2,117],65:[2,117],68:[2,117],70:[2,117],85:[2,117],86:[2,117],87:[2,117],88:[2,117],94:[2,117],95:[2,117],96:[2,117],98:[2,117],99:[2,117],104:[2,117],105:[2,117],108:[2,117],111:[2,117],112:[2,117],113:[2,117],114:[2,117],115:[2,117],116:[2,117]},{2:[2,115],6:[2,115],11:[2,115],13:[2,115],15:[2,115],18:[2,115],30:[2,115],37:[2,115],51:[2,115],52:[2,115],53:[2,115],54:[2,115],55:[2,115],56:[2,115],57:[2,115],58:[2,115],59:[2,115],60:[2,115],61:[2,115],62:[2,115],64:[2,115],65:[2,115],68:[2,115],70:[2,115],85:[2,115],86:[2,115],87:[2,115],88:[2,115],94:[2,115],95:[2,115],96:[2,115],98:[2,115],99:[2,115],104:[2,115],105:[2,115],108:[2,115],111:[2,115],112:[2,115],113:[2,115],114:[2,115],115:[2,115],116:[2,115]},{2:[2,92],6:[2,92],11:[2,92],13:[2,92],15:[2,92],18:[2,92],37:[2,92],51:[2,92],52:[2,92],53:[2,92],54:[2,92],55:[2,92],56:[2,92],57:[2,92],58:[2,92],59:[2,92],60:[2,92],61:[2,92],62:[2,92],64:[2,92],65:[2,92],70:[2,92],85:[2,92],86:[2,92],87:[2,92],88:[2,92],94:[2,92],95:[2,92],96:[2,92],98:[2,92],99:[2,92],104:[2,92],105:[2,92],111:[2,92],112:[2,92],113:[2,92],114:[2,92],115:[2,92],116:[2,92]},{5:167,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[2,107],63:[2,107],67:[2,107],69:[2,107],72:[2,107],85:[2,107],87:[2,107],88:[2,107],96:[2,107],99:[2,107],111:[2,107],112:[2,107],113:[2,107],114:[2,107],115:[2,107],116:[2,107]},{13:[2,109],63:[2,109],67:[2,109],69:[2,109],72:[2,109],85:[2,109],87:[2,109],88:[2,109],96:[2,109],99:[2,109],111:[2,109],112:[2,109],113:[2,109],114:[2,109],115:[2,109],116:[2,109]},{2:[2,111],6:[2,111],11:[2,111],13:[2,111],15:[2,111],18:[2,111],37:[2,111],51:[2,111],52:[2,111],53:[2,111],54:[2,111],55:[2,111],56:[2,111],57:[2,111],58:[2,111],59:[2,111],60:[2,111],61:[2,111],62:[2,111],63:[2,111],64:[2,111],65:[2,111],67:[2,111],69:[2,111],70:[2,111],72:[2,111],85:[2,111],86:[2,111],87:[2,111],88:[2,111],94:[2,111],95:[2,111],96:[2,111],98:[2,111],99:[2,111],104:[2,111],105:[2,111],108:[2,111],111:[2,111],112:[2,111],113:[2,111],114:[2,111],115:[2,111],116:[2,111]},{29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],65:[1,168],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,67],6:[2,67],11:[2,67],15:[2,67],18:[2,67],29:48,37:[2,67],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,67],65:[2,67],70:[2,67],74:44,86:[2,67],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{13:[2,142],15:[2,142],30:[2,142],37:[2,142],68:[2,142],85:[2,142],87:[2,142],88:[2,142],94:[2,142],98:[2,142],99:[2,142],108:[2,142],111:[2,142],112:[2,142],113:[2,142],114:[2,142],115:[2,142],116:[2,142]},{13:[1,63],25:58,28:170,32:60,80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,110:169,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{13:[1,63],25:58,28:173,32:60,71:171,77:172,80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,69],6:[2,69],11:[2,69],15:[2,69],18:[2,69],29:48,37:[2,69],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,69],65:[2,69],70:[2,69],74:44,86:[2,69],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{2:[2,13],6:[2,13],11:[2,13],15:[2,13],18:[2,13],37:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],64:[2,13],65:[2,13],70:[2,13],73:[2,13],86:[2,13],94:[2,13],95:[2,13],98:[2,13],104:[2,13],105:[2,13]},{6:[1,174]},{13:[1,72],20:175,24:69,25:70,28:71,31:[1,73],32:60,34:[1,74],35:[1,75],80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,14],6:[2,14],11:[2,14],15:[2,14],18:[2,14],37:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],64:[2,14],65:[2,14],70:[2,14],73:[2,14],86:[2,14],94:[2,14],95:[2,14],98:[2,14],104:[2,14],105:[2,14]},{2:[2,20],6:[2,20],11:[2,20],15:[2,20],18:[2,20],37:[2,20],51:[2,20],52:[2,20],53:[2,20],54:[2,20],55:[2,20],56:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],64:[2,20],65:[2,20],70:[2,20],86:[2,20],94:[2,20],95:[2,20],98:[2,20],104:[2,20],105:[2,20]},{2:[2,23],6:[2,23],11:[1,176],15:[2,23],18:[2,23],29:48,37:[2,23],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,23],65:[2,23],70:[2,23],74:44,86:[2,23],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{26:177,30:[1,121]},{13:[1,63],25:58,28:178,32:60,80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,25],6:[2,25],11:[2,25],15:[2,25],18:[2,25],37:[1,179],51:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],56:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],64:[2,25],65:[2,25],70:[2,25],86:[2,25],94:[2,25],95:[2,25],98:[2,25],104:[2,25],105:[2,25]},{2:[2,100],6:[2,100],11:[2,100],15:[2,100],18:[2,100],37:[2,100],51:[2,100],52:[2,100],53:[2,100],54:[2,100],55:[2,100],56:[2,100],57:[2,100],58:[2,100],59:[2,100],60:[2,100],61:[2,100],62:[2,100],64:[2,100],65:[2,100],70:[2,100],86:[2,100],94:[2,100],95:[2,100],98:[2,100],104:[2,100],105:[2,100]},{2:[2,101],6:[2,101],11:[2,101],15:[2,101],18:[2,101],37:[2,101],51:[2,101],52:[2,101],53:[2,101],54:[2,101],55:[2,101],56:[2,101],57:[2,101],58:[2,101],59:[2,101],60:[2,101],61:[2,101],62:[2,101],64:[2,101],65:[2,101],70:[2,101],86:[2,101],94:[2,101],95:[2,101],98:[2,101],104:[2,101],105:[2,101]},{2:[2,102],6:[2,102],11:[2,102],15:[2,102],18:[2,102],37:[2,102],51:[2,102],52:[2,102],53:[2,102],54:[2,102],55:[2,102],56:[2,102],57:[2,102],58:[2,102],59:[2,102],60:[2,102],61:[2,102],62:[2,102],64:[2,102],65:[2,102],70:[2,102],86:[2,102],94:[2,102],95:[2,102],98:[2,102],104:[2,102],105:[2,102]},{88:[1,180],99:[1,108]},{2:[2,103],6:[2,103],11:[2,103],15:[2,103],18:[2,103],37:[2,103],51:[2,103],52:[2,103],53:[2,103],54:[2,103],55:[2,103],56:[2,103],57:[2,103],58:[2,103],59:[2,103],60:[2,103],61:[2,103],62:[2,103],64:[2,103],65:[2,103],70:[2,103],86:[2,103],94:[2,103],95:[2,103],98:[2,103],104:[2,103],105:[2,103]},{2:[2,26],6:[2,26],11:[2,26],15:[2,26],18:[2,26],37:[1,179],51:[2,26],52:[2,26],53:[2,26],54:[2,26],55:[2,26],56:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],64:[2,26],65:[2,26],70:[2,26],86:[2,26],94:[2,26],95:[2,26],98:[2,26],104:[2,26],105:[2,26]},{2:[2,27],6:[2,27],11:[2,27],15:[2,27],18:[2,27],37:[1,179],51:[2,27],52:[2,27],53:[2,27],54:[2,27],55:[2,27],56:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],64:[2,27],65:[2,27],70:[2,27],86:[2,27],94:[2,27],95:[2,27],98:[2,27],104:[2,27],105:[2,27]},{15:[1,181],37:[1,139]},{2:[2,88],6:[2,88],11:[2,88],13:[2,88],15:[2,88],18:[2,88],37:[2,88],51:[2,88],52:[2,88],53:[2,88],54:[2,88],55:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],64:[2,88],65:[2,88],70:[2,88],85:[2,88],86:[2,88],87:[2,88],88:[2,88],94:[2,88],95:[2,88],96:[2,88],98:[2,88],99:[2,88],104:[2,88],105:[2,88],111:[2,88],112:[2,88],113:[2,88],114:[2,88],115:[2,88],116:[2,88]},{15:[2,93],29:48,37:[2,93],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,86:[2,93],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{5:182,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{15:[1,183],37:[1,184]},{15:[2,145],37:[2,145]},{6:[1,185],18:[1,186]},{6:[2,77],18:[2,77]},{68:[1,187]},{2:[2,15],6:[2,15],11:[2,15],15:[2,15],18:[2,15],37:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],64:[2,15],65:[2,15],70:[2,15],73:[2,15],86:[2,15],94:[2,15],95:[2,15],98:[2,15],104:[2,15],105:[2,15]},{2:[2,16],6:[2,16],18:[2,16]},{4:[1,68],22:188},{2:[2,21],6:[2,21],11:[2,21],15:[2,21],18:[2,21],37:[2,21],51:[2,21],52:[2,21],53:[2,21],54:[2,21],55:[2,21],56:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],64:[2,21],65:[2,21],70:[2,21],86:[2,21],94:[2,21],95:[2,21],98:[2,21],104:[2,21],105:[2,21]},{15:[1,189]},{29:159,91:190,92:160,93:[1,162],94:[1,161],98:[1,51]},{94:[1,191]},{2:[2,91],6:[2,91],11:[2,91],13:[2,91],15:[2,91],18:[2,91],37:[2,91],51:[2,91],52:[2,91],53:[2,91],54:[2,91],55:[2,91],56:[2,91],57:[2,91],58:[2,91],59:[2,91],60:[2,91],61:[2,91],62:[2,91],64:[2,91],65:[2,91],70:[2,91],85:[2,91],86:[2,91],87:[2,91],88:[2,91],94:[2,91],95:[2,91],96:[2,91],98:[2,91],99:[2,91],104:[2,91],105:[2,91],111:[2,91],112:[2,91],113:[2,91],114:[2,91],115:[2,91],116:[2,91]},{2:[2,65],6:[2,65],11:[2,65],15:[2,65],18:[2,65],29:48,37:[2,65],51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],64:[2,65],65:[2,65],70:[2,65],74:44,86:[2,65],89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{13:[2,143],15:[2,143],30:[2,143],37:[2,143],68:[2,143],85:[2,143],87:[2,143],88:[2,143],94:[2,143],98:[2,143],99:[2,143],108:[2,143],111:[2,143],112:[2,143],113:[2,143],114:[2,143],115:[2,143],116:[2,143]},{13:[1,63],25:58,28:192,32:60,80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,68],6:[2,68],11:[2,68],15:[2,68],18:[2,68],37:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],64:[2,68],65:[2,68],70:[2,68],86:[2,68],94:[2,68],95:[2,68],98:[2,68],104:[2,68],105:[2,68]},{13:[1,63],25:58,28:173,32:60,77:193,80:29,81:78,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,106:76,107:77,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{5:194,13:[1,14],25:18,32:13,39:11,50:4,63:[1,5],66:6,67:[1,7],69:[1,8],72:[1,9],75:10,80:29,81:12,82:15,83:16,85:[1,19],87:[1,28],88:[1,30],96:[1,17],99:[1,27],102:20,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,24],6:[2,24],11:[2,24],15:[2,24],18:[2,24],37:[2,24],51:[2,24],52:[2,24],53:[2,24],54:[2,24],55:[2,24],56:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],64:[2,24],65:[2,24],70:[2,24],86:[2,24],94:[2,24],95:[2,24],98:[2,24],104:[2,24],105:[2,24]},{13:[1,63],25:58,27:195,32:60,80:29,81:59,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,107:57,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,99],6:[2,99],11:[2,99],15:[2,99],18:[2,99],37:[2,99],51:[2,99],52:[2,99],53:[2,99],54:[2,99],55:[2,99],56:[2,99],57:[2,99],58:[2,99],59:[2,99],60:[2,99],61:[2,99],62:[2,99],64:[2,99],65:[2,99],70:[2,99],86:[2,99],94:[2,99],95:[2,99],98:[2,99],104:[2,99],105:[2,99]},{2:[2,104],6:[2,104],11:[2,104],15:[2,104],18:[2,104],37:[2,104],51:[2,104],52:[2,104],53:[2,104],54:[2,104],55:[2,104],56:[2,104],57:[2,104],58:[2,104],59:[2,104],60:[2,104],61:[2,104],62:[2,104],64:[2,104],65:[2,104],70:[2,104],86:[2,104],94:[2,104],95:[2,104],98:[2,104],104:[2,104],105:[2,104]},{15:[2,144],37:[2,144]},{6:[2,76],18:[2,76]},{6:[2,78],18:[2,78],29:48,51:[1,32],52:[1,33],53:[1,34],54:[1,35],55:[1,36],56:[1,37],57:[1,38],58:[1,39],59:[1,40],60:[1,41],61:[1,42],62:[1,43],74:44,89:45,90:46,94:[1,49],95:[1,47],97:50,98:[1,51],104:[1,52],105:[1,53]},{13:[1,63],25:58,26:196,30:[1,121],32:60,80:29,81:59,85:[1,64],87:[1,28],88:[1,30],99:[1,27],102:20,107:111,108:[1,61],109:62,111:[1,21],112:[1,22],113:[1,23],114:[1,24],115:[1,25],116:[1,26]},{2:[2,22],6:[2,22],11:[2,22],15:[2,22],18:[2,22],37:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],64:[2,22],65:[2,22],70:[2,22],86:[2,22],94:[2,22],95:[2,22],98:[2,22],104:[2,22],105:[2,22]}],
defaultActions: {91:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    var ranges = this.lexer.options && this.lexer.options.ranges;

    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || EOF; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return {val:yy_.yytext};
break;
case 2:return {val:yy_.yytext,typ:"float"};
break;
case 3:return {val:"false",typ:"False"};
break;
case 4:return {val:"true",typ:"True"};
break;
case 5:return {val:"==",typ:"=="};
break;
case 6:return {val:"/=",typ:"/="};
break;
case 7:return {val:">=",typ:">="};
break;
case 8:return {val:"<=",typ:"<="};
break;
case 9:return {val:">",typ:">"};
break;
case 10:return {val:"<",typ:"<"};
break;
case 11:return {val:"(",typ:"("};
break;
case 12:return {val:")",typ:")"};
break;
case 13:return {val:"*",typ:"*"};
break;
case 14:return {val:"/",typ:"/"};
break;
case 15:return {val:"-",typ:"-"};
break;
case 16:return {val:"+",typ:"+"};
break;
case 17:return {val:"^",typ:"^"};
break;
case 18:return {val:"=",typ:"="};
break;
case 19:return {val:"_",typ:"_"};
break;
case 20:return {val:"!",typ:"!"};
break;
case 21:return {val:"#",typ:"#"};
break;
case 22:return {val:"$",typ:"$"};
break;
case 23:return {val:"&",typ:"&"};
break;
case 24:return {val:".",typ:"."};
break;
case 25:return {val:"@",typ:"@"};
break;
case 26:return {val:"\\",typ:"\\"};      
break;
case 27:return {val:"|",typ:"|"};
break;
case 28:return {val:"~",typ:"~"};
break;
case 29:return {val:":",typ:":"};
break;
case 30:return {val:"::",typ:"::"};
break;
case 31:return {val:",",typ:","};
break;
case 32:return {val:"EOF",typ:"EOF"};
break;
case 33:return {val:"where",typ:"where"};
break;
case 34:return {val:"if",typ:"if"};
break;
case 35:return {val:"then",typ:"then"};
break;
case 36:return {val:"else",typ:"else"};
break;
case 37:return {val:"let",typ:"let"};
break;
case 38:return {val:"hiding",typ:"hiding"};
break;
case 39:return {val:"case",typ:"case"};
break;
case 40:return {val:"class",typ:"class"};
break;
case 41:return {val:"dat",typ:"data"};
break;
case 42:return {val:"default",typ:"default"};
break;
case 43:return {val:"deriving",typ:"deriving"};
break;
case 44:return {val:"do",typ:"do"};
break;
case 45:return {val:"foreign",typ:"foreign"};
break;
case 46:return {val:"import",typ:"import"};
break;
case 47:return {val:"infixl",typ:"infixl"};
break;
case 48:return {val:"instance",typ:"instance"};
break;
case 49:return {val:"in",typ:"in"};
break;
case 50:return {val:"module",typ:"module"};
break;
case 51:return {val:"newtype",typ:"newtype"};
break;
case 52:return {val:"of",typ:"of"};
break;
case 53:return {val:"type",typ:"type"};
break;
case 54:return {val:yy_.yytext,typ:"varid"};
break;
case 55:return {val:yy_.yytext,typ:"conid"};
break;
case 56:return {val:yy_.yytext,typ:"string"};
break;
case 57:return {val:yy_.yytext,typ:"char"};
break;
case 58:return {val:yy_.yytext,typ:"varsym"};
break;
case 59:return {val:yy_.yytext,typ:"consym"};
break;
case 60:return {val:yy_.yytext,typ:"qvarid"};
break;
case 61:return {val:yy_.yytext,typ:"qconid"};
break;
case 62:return {val:yy_.yytext,typ:"qvarsym"};
break;
case 63:return {val:yy_.yytext,typ:"qconsym"};
break;
}
},
rules: [/^(?:--.*|\{-.*-\})/,/^(?:\s+)/,/^(?:(-)?[0-9]+(\.[0-9]+)?)/,/^(?:False|false\b)/,/^(?:True|true\b)/,/^(?:==)/,/^(?:\/=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:=)/,/^(?:_\b)/,/^(?:!)/,/^(?:#)/,/^(?:\$)/,/^(?:&)/,/^(?:\.)/,/^(?:@)/,/^(?:\\)/,/^(?:\|)/,/^(?:~)/,/^(?::)/,/^(?:::)/,/^(?:,)/,/^(?:$)/,/^(?:where\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:let\b)/,/^(?:hiding\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:data\b)/,/^(?:default\b)/,/^(?:deriving\b)/,/^(?:do\b)/,/^(?:foreign\b)/,/^(?:import\b)/,/^(?:infixl\b)/,/^(?:instance\b)/,/^(?:in\b)/,/^(?:module\b)/,/^(?:newtype\b)/,/^(?:of\b)/,/^(?:type\b)/,/^(?:[a-z][A-Za-z0-9_]*)/,/^(?:[A-Z][A-Za-z0-9_]*)/,/^(?:"([^\"])*")/,/^(?:'(')?')/,/^(?:["!""#""$""&"".""<"">""=""?""@""\\""|""~"]+)/,/^(?::["!""#""$""&"".""<"">""=""?""@""\\""|""~"]*)/,/^(?:[[A-Z][A-Za-z0-9_]*\.+[a-z][A-Za-z0-9_]*)/,/^(?:[[A-Z][A-Za-z0-9_]*\.+[A-Z][A-Za-z0-9_]*)/,/^(?:[[A-Z][A-Za-z0-9_]*\.+["!""#""$""&"<"">""=""?""@""\\""|""~"]+)/,/^(?:[[A-Z][A-Za-z0-9_]*\.+:["!""#""$""&"<"">""=""?""@""\\""|""~"]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = LichParser;
exports.Parser = LichParser.Parser;
exports.parse = function () { return LichParser.parse.apply(LichParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}